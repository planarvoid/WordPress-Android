subprojects {
  ext {
    releaseVersion = System.env.containsKey('ARTIFACT_VERSION') ? System.env.ARTIFACT_VERSION : 0 //0 denotes debug build
  }

  repositories {
    mavenLocal()
    maven {
      url "http://maven.int.s-cloud.net/content/groups/hosted"
    }
  }

  buildscript {
    repositories { jcenter() }

    dependencies {
      classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:1.12.+'
    }
  }

  ext.applyPmdConfig = { pmd, project ->
    pmd.consoleOutput true
    pmd.ruleSetFiles = files("$project.path/../../../app/static-analysis/pmd.xml")
    pmd.sourceSets = [project.sourceSets.main]
  }

  ext.applyTestLoggingConfig = { test ->
    test.testLogging.showStandardStreams = true
    test.testLogging.showStackTraces = true
    test.testLogging.exceptionFormat = "full"
  }

  ext.applyMavenJavaPublishingConfig = { project, publishing, publicationName, artifactGroupId ->
    project.tasks.create("sourceJar", Jar) {
      from project.sourceSets.main.allJava
    }


    publishing.publications.create(publicationName, MavenPublication) {
      from project.components.java

      version releaseVersion
      artifactId "com.soundcloud.android"
      groupId artifactGroupId

      artifact project.tasks.getByName('sourceJar') {
        classifier "sources"
      }
    }


    publishing.repositories {
      maven {
        url "http://maven.int.s-cloud.net/content/repositories/releases"
      }
    }

  }

}


//Ensure we cannot call the publish tasks without specific env variables set, makes accidental publishing not possible
gradle.taskGraph.whenReady { graph ->
  subprojects.each { subproject ->
    subproject.tasks.withType(GenerateMavenPom).each { task ->
      task.doFirst {
        if(!System.env.containsKey('ARTIFACT_VERSION')) {
          throw new IllegalStateException("Can not perform release if not run in CI environment")
        }
      }
    }
  }
}





