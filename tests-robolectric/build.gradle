def androidProject = ':app'
def outputDirectory = "${project.buildDir}/classes/test"

evaluationDependsOn(androidProject)

apply plugin: 'java'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

configurations {
  removableDependency
}

test.dependsOn project(androidProject).configurations.testSupport

dependencies {
  def androidModule = project(androidProject)
  def debugVariant = androidModule.android.applicationVariants.find({it.name == 'debug'})
  def testingLibraries = rootProject.ext.unitTestLibraries

  compile testingLibraries.daggerCompiler
  compile androidModule.configurations.testSupport.artifacts.files

  testCompile "com.pivotallabs:robolectric:1.2_sdk_21_fix"
  testCompile "junit:junit:4.9"
  testCompile "com.github.xian:great-expectations:0.14"
  testCompile "org.hamcrest:hamcrest-all:1.3"
  testCompile "org.xerial:sqlite-jdbc:3.7.15-M1"
  testCompile "org.javassist:javassist:3.18.2-GA"
  testCompile "org.json:json:20080701"
  testCompile testingLibraries.mockito
  testCompile testingLibraries.modelCitizen
  testCompile testingLibraries.equalsVerifier
  testCompile testingLibraries.propellerTest

  testCompile project(path: androidProject, configuration: 'debugCompile')
  testCompile debugVariant.javaCompile.classpath
  testCompile debugVariant.javaCompile.outputs.files
  testCompile files(androidModule.android.bootClasspath)
}

sourceSets {
  test {
    def testCompileClasspath = compileClasspath
    def testRuntimeClasspath = runtimeClasspath

    java.srcDirs = ['src/test/java']
    resources.srcDirs = ['src/test/resources']
    output.resourcesDir = outputDirectory
    output.classesDir   = outputDirectory

    compileClasspath = setupClasspath(testCompileClasspath)
    runtimeClasspath = setupClasspath(testRuntimeClasspath)
  }
}

tasks.withType(Test) {
  //If we don't do this, Gradle always thinks this task is up to date and skips the tests
  outputs.upToDateWhen { false }

  jvmArgs '-Dfile.encoding=UTF-8'

  //To avoid OutOfMemoryError
  jvmArgs '-XX:MaxPermSize=2048m'
  minHeapSize = '512m'
  maxHeapSize = '1024m'

  //Robolectric issue:
  //https://github.com/robolectric/robolectric/issues/1332
  jvmArgs '-XX:-UseSplitVerifier'
  jvmArgs '-noverify'

  scanForTestClasses = false

  //This has to be done like this because, for some reason,
  //the IDE and command line are having different working directories.
  workingDir = new File('../')

  include '**/*Should.class'
  include '**/*Test.class'
  include '**/*Tests.class'
  exclude '**/*IT.class'
  exclude '**/Abstract*.class'

  //Specific abstract classes
  //without 'abstract' naming convention
  exclude '**/StorageIntegrationTest.class'
}

Object findRuntimeDependency(String name) {
  project.configurations.testRuntime.find { it.name.startsWith(name) }
}

FileCollection setupClasspath(FileCollection classPath) {
  //Gradle does not guarantee dependency order, so we must make sure
  //Robolectric artifact appears before android artifact
  def robolectricDependency = findRuntimeDependency('robolectric')
  def androidDependency = findRuntimeDependency('android.jar')

  //Remove unused dependencies from classpath
  classPath -= configurations.removableDependency

  //Remove android dependency: must be put at the end
  //to avoid Stub! Runtime Exception
  classPath -= files(androidDependency)

  return files(robolectricDependency) + classPath + files(androidDependency)
}