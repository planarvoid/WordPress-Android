import java.util.regex.Pattern

ext {
  debugVersionCode        = getCurrentVersionCode()
  alphaVersionCode        = 1000
  betaVersionCode         = debugVersionCode + 1
  releaseVersionCode      = debugVersionCode + 2
  followUpBetaVersionCode = debugVersionCode + 3
  versionName             = new Date().format('yyyy.MM.dd')
  currentVersionName      = getCurrentVersionName()
  releaseBody             = System.env.containsKey('RELEASE_BODY') ? System.env.RELEASE_BODY : '' //'' signals local build
  releaseName             = System.env.containsKey('RELEASE_NAME') ? System.env.RELEASE_NAME : '' //'' signals local build
  pipelineVersion         = System.env.containsKey('PIPELINE_VERSION') ? System.env.PIPELINE_VERSION : '0-0' // '0-0' signals local build
  buildType               = System.env.containsKey('BUILD_TYPE') ? System.env.BUILD_TYPE : 'debug' // 'debug' signals local build
  buildFlavor             = System.env.containsKey('JENKINS_URL') ? 'prod' : 'dev' // 'prod' signals CI build; 'dev' signals local build
  gitBranch               = System.env.containsKey('GIT_BRANCH') ? System.env.GIT_BRANCH.replace('origin/','') : '' // '' signals local build

  rootPackage               = "com.soundcloud.android"
  applicationId             = provideApplicationId()
  testApplicationId         = "${applicationId}.tests"
  testInstrumentationRunner = "${rootPackage}.framework.runner.AndroidTestRunner"

  outputsDir            = "$project.buildDir/outputs/apk"
  apkPath               = "$outputsDir/soundcloud-android-$versionName-${pipelineVersion}.apk" // only used by renameApk task (for CI)
  testApkPath           = "$outputsDir/app-$buildFlavor-$buildType-androidTest.apk"

  buildSrcDir = 'buildsystem'
}

private def int getCurrentVersionCode() {
  Integer.parseInt(extractFromManifest('versionCode=\"(\\d+)\"'))
}

private def String getCurrentVersionName() {
  extractFromManifest('versionName=\"(.+)\"')
}

private def extractFromManifest(String regex) {
  def manifestText = file(rootProject.ext.manifestSrcFile).getText()
  def matcher = Pattern.compile(regex).matcher(manifestText)
  matcher.find()
  matcher.group(1)
}

private def provideApplicationId() {
  boolean isReleaseBuild = (buildType == 'preRelease' || buildType == 'beta' || buildType == 'release')
  return isReleaseBuild ? rootPackage : "${rootPackage}.${buildType}"
}

buildscript {
  dependencies {
    classpath gradlePlugins.fabric
    classpath gradlePlugins.frodo
    classpath gradlePlugins.retrolambda
    classpath gradlePlugins.sqlDelight
    classpath gradlePlugins.firebase
    classpath gradlePlugins.detekt
    classpath gradlePlugins.kotlinAllOpen
  }
}

apply from: "${buildSrcDir}/build_variants.gradle"
apply from: "${buildSrcDir}/feature_flags.gradle"
apply from: "${buildSrcDir}/app_properties.gradle"
apply from: "${buildSrcDir}/versionizer.gradle"
apply from: "${buildSrcDir}/slackbot.gradle"
apply from: "${buildSrcDir}/static_analysis.gradle"
apply from: "${buildSrcDir}/apublisher.gradle"
apply from: "${buildSrcDir}/git.gradle"
apply from: "${buildSrcDir}/github.gradle"
apply from: "${buildSrcDir}/version_database.gradle"
apply from: "${buildSrcDir}/ci.gradle"
apply from: "${buildSrcDir}/mobile_testrunner.gradle"
apply from: "${buildSrcDir}/system_utilities.gradle"

apply plugin: 'com.android.application'
//You can enable it when need it.
//apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'maven'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-allopen'

android {
  compileSdkVersion rootProject.ext.androidCompileSdkVersion
  buildToolsVersion rootProject.ext.androidBuildToolsVersion

  defaultConfig {
    targetSdkVersion rootProject.ext.androidTargetSdkVersion
    applicationId project.ext.rootPackage
    testApplicationId project.ext.testApplicationId
    testInstrumentationRunner project.ext.testInstrumentationRunner

    buildConfigField "int", "ROBOELETRIC_SDK_VERSION", "$rootProject.ext.robolectricConfigSdkVersion"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    ndk {
      abiFilters 'x86', 'armeabi', 'armeabi-v7a'
    }
  }

  testOptions {
    unitTests.returnDefaultValues = true

    // This allows us see tests execution progress in the output on the CI.
    unitTests.all {
      testLogging {
        events 'skipped', 'failed'
        exceptionFormat 'full'
      }
    }
  }

  sourceSets {
    main {
      manifest.srcFile rootProject.ext.manifestSrcFile
      java.srcDirs rootProject.ext.javaSrcDirs
      res.srcDirs rootProject.ext.resSrcDirs
      assets.srcDirs rootProject.ext.assetsSrcDirs
      aidl.srcDirs rootProject.ext.javaSrcDirs
    }

    androidTest {
      assets.srcDirs 'src/integrationTest/assets'
      java.srcDirs 'src/integrationTest/java'
    }
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude 'META-INF/rxjava.properties'
  }

  dexOptions {
    jumboMode true
    javaMaxHeapSize "4g"
  }
}

configurations {
  testSupport // for exporting our test helpers
  prodBetaCompile { }
}

task testSupportJar(type: Jar, dependsOn: ':app:compileDevDebugUnitTestSources') {
  from "$project.buildDir/intermediates/classes/test/dev/debug"
  exclude "**/*Test.class"
  exclude "**/*Test\$*.class"
  includeEmptyDirs = false
  archiveName "test-support.jar"
}

tasks.withType(Test) {
  jvmArgs '-XX:CompileCommand=exclude,com/soundcloud/propeller/*.*'
}

artifacts {
  testSupport testSupportJar
}

allOpen {
  annotation("com.soundcloud.android.utils.OpenForTesting")
}

dependencies {
  def libraries = rootProject.ext.libraries
  def acceptanceTestLibraries = rootProject.ext.acceptanceTestLibraries

  /* Compile/Dev Time */
  annotationProcessor libraries.daggerCompiler
  annotationProcessor libraries.lightCycleProcessor
  annotationProcessor libraries.autoValue
  annotationProcessor libraries.autoFactory
  annotationProcessor libraries.autoParcel
  annotationProcessor libraries.butterKnifeCompiler
  annotationProcessor libraries.autoValueIgnoreEquals
  annotationProcessor libraries.groupieCompiler

  provided libraries.findBugsAnnotations
  provided libraries.findBugsJsr305
  provided libraries.jetbrainsAnnotations
  provided libraries.javaxAnnotations // for auto-value

  /* SoundCloud Libraries */
  compile libraries.androidKit
  compile libraries.propeller
  compile libraries.skippy
  compile libraries.flipper
  compile libraries.soundCloudVorbisEncoder
  compile (libraries.lightCycle) {
    exclude group: 'com.android.support', module: 'preference-v7'
  }
  compile libraries.groupie
  compile libraries.lintlib

  compile libraries.kotlinStdLib

  /* 3rd Party Libraries */
  compile libraries.comscore
  compile libraries.adjustAndroid
  compile libraries.dagger
  compile (libraries.crashlytics) {
    transitive = true
  }
  // We only include Crashlytics native libraries in Beta because CrashlyticsNDK often
  // causes an ANR when a native crash is encountered. See FabricProvider.initialize().
  prodBetaCompile (libraries.crashlyticsNdk) {
    transitive = true
  }

  compile libraries.jacksonAnnotations
  compile libraries.jacksonDataBind
  compile libraries.jacksonCore
  compile libraries.okHttp

  compile libraries.androidCrop
  compile libraries.rxAndroid
  compile libraries.rxJava
  compile libraries.rxJavaAsyncUtil // remove when getting rid of LegacyCommand
  compile libraries.rxAndroid2
  compile libraries.rxJava2
  compile libraries.rxJavaInterop
  compile libraries.universalImageLoader
  compile libraries.sqlBrite
  compile libraries.dualCache
  compile libraries.facebookRebound
  compile(libraries.facebookAndroidSdk) {
      // see https://github.com/mente/facebook-api-android-aar/issues/11
      transitive = true
  }
  compile libraries.butterKnife
  compile libraries.appBoy
  compile libraries.krux
  compile libraries.moat
  compile (libraries.tapTargetView) {
    exclude group: 'com.android.support'
  }

  compile libraries.rxBinding
  compile libraries.rxBindingRecyclerView

  /* Android ... keep order! */
  compile libraries.androidMultidex
  compile libraries.androidDesign
  compile libraries.androidSupportLibrary
  compile libraries.androidAppCompatLibrary
  compile libraries.androidMediaRouterLibrary
  compile libraries.androidRecyclerView
  compile libraries.androidCardView
  compile libraries.androidConstraintLayout
  compile libraries.androidChromeCustomTabs
  compile libraries.androidPlayServicesBase
  compile libraries.androidPlayServicesAuth
  compile libraries.androidPlayServicesCast
  compile libraries.firebaseCore
  compile libraries.firebaseConfig
  compile libraries.firebaseMessaging
  compile libraries.firebaseAnalytics
  compile libraries.firebasePerformance

  /* Unit tests */
  testCompile libraries.androidSupportAnnotations
  testCompile libraries.kotlinStdLib
  testCompile unitTestLibraries.junit
  testCompile unitTestLibraries.assertj
  testCompile unitTestLibraries.assertjAndroid
  testCompile unitTestLibraries.mockito
  testCompile unitTestLibraries.mockitoKotlin
  testCompile unitTestLibraries.kotlinReflect
  testCompile unitTestLibraries.robolectric
  testCompile unitTestLibraries.robolectricSupport
  testCompile unitTestLibraries.modelCitizen
  testCompile unitTestLibraries.equalsVerifier
  testCompile unitTestLibraries.sqliteJdbc

  /* Acceptance Tests */
  androidTestCompile libraries.androidMultidex
  androidTestCompile acceptanceTestLibraries.multidexInstrumentation

  androidTestCompile (acceptanceTestLibraries.androidTestRunner) {
    exclude group: 'com.android.support', module: 'support-annotations'
  }
  androidTestCompile (acceptanceTestLibraries.androidTestRules) {
    exclude group: 'com.android.support', module: 'support-annotations'
  }
  androidTestCompile acceptanceTestLibraries.mockito
  androidTestCompile acceptanceTestLibraries.mockitoAndroid
  androidTestCompile acceptanceTestLibraries.hamcrest
  androidTestCompile acceptanceTestLibraries.robotium
  androidTestCompile(acceptanceTestLibraries.wiremock) {
    exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    exclude group: 'asm', module: 'asm'
    exclude group: 'org.ow2.asm'
    exclude group: 'org.json', module: 'json'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    exclude group: 'org.hamcrest', module: 'hamcrest-core'
  }
  androidTestCompile acceptanceTestLibraries.httpComponents // needed for wiremock
  androidTestCompile acceptanceTestLibraries.mrLocalLocal
  androidTestCompile unitTestLibraries.assertj
  androidTestAnnotationProcessor libraries.daggerCompiler
  androidTestCompile (acceptanceTestLibraries.espressoCore) {
    exclude module: 'support-annotations'
  }
  androidTestCompile (acceptanceTestLibraries.espressoContrib) {
    exclude group: 'com.android.support'
  }
}

//ADD THIS AT THE BOTTOM
//https://firebase.google.com/docs/android/setup
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.firebase-perf'


