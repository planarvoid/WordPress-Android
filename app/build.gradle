import java.util.regex.Pattern

ext {
  versionCode = getNewVersionCode()
  versionName = new Date().format('yy.MM.dd')
  releaseBody = System.env.containsKey('RELEASE_BODY') ? System.env.RELEASE_BODY : '' //'' signals local build
  releaseName = System.env.containsKey('RELEASE_NAME') ? System.env.RELEASE_NAME : '' //'' signals local build
  buildNumber = System.env.containsKey('BUILD_NUMBER') ? System.env.BUILD_NUMBER : '0' // '0' signals local build
  buildType   = System.env.containsKey('BUILD_TYPE') ? System.env.BUILD_TYPE : 'debug' // 'debug' signals local build
  gitBranch   = System.env.containsKey('GIT_BRANCH') ? System.env.GIT_BRANCH.replace('origin/','') : '' // '' signals local build
  apkPath     = "${project.buildDir}/outputs/apk/soundcloud-android-${versionName}-${buildType}.apk" // only used by renameApk task for CI
}

buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'http://maven.int.s-cloud.net/content/repositories/releases' }
  }
  dependencies {
    classpath 'io.fabric.tools:gradle:1.+'
    classpath 'com.soundcloud.gandalf:gandalf-plugin:0.1.1'
    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.1.1'
  }
}

def buildSrcDir = 'buildsystem'
apply from: "${buildSrcDir}/build_variants.gradle"
apply from: "${buildSrcDir}/feature_flags.gradle"
apply from: "${buildSrcDir}/app_properties.gradle"
apply from: "${buildSrcDir}/versionizer.gradle"
apply from: "${buildSrcDir}/static_analysis.gradle"
apply from: "${buildSrcDir}/ci.gradle"
apply from: "${buildSrcDir}/networkmanager.gradle"
apply from: "${buildSrcDir}/git.gradle"
apply from: "${buildSrcDir}/github.gradle"
apply from: "${buildSrcDir}/repacker/repacker.gradle"
apply from: "${buildSrcDir}/mobile_testrunner/mobile_testrunner.gradle"

apply plugin: 'com.android.application'
apply plugin: 'maven'
apply plugin: 'android-apt'
apply plugin: 'io.fabric'
apply plugin: 'com.getkeepsafe.dexcount'

android {
  compileSdkVersion rootProject.ext.androidCompileSdkVersion
  buildToolsVersion rootProject.ext.androidBuildToolsVersion

  defaultConfig {
    applicationId rootProject.ext.applicationId
    targetSdkVersion rootProject.ext.androidTargetSdkVersion
    testApplicationId rootProject.ext.testApplicationId
    testInstrumentationRunner rootProject.ext.testInstrumentationRunner
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  sourceSets {
    main {
      manifest.srcFile rootProject.ext.manifestSrcFile
      java.srcDirs rootProject.ext.javaSrcDirs
      res.srcDirs rootProject.ext.resSrcDirs
      assets.srcDirs rootProject.ext.assetsSrcDirs
      aidl.srcDirs rootProject.ext.javaSrcDirs
    }
  }

  lintOptions {
    abortOnError false
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
  }

  dexOptions {
    jumboMode true
    javaMaxHeapSize "4g"
  }
}

configurations {
  testSupport // for exporting our test helpers
}

task testSupportJar(type: Jar, dependsOn: ':app:compileDevDebugUnitTestSources') {
  from "$project.buildDir/intermediates/classes/test/dev/debug"
  exclude "**/*Test.class"
  exclude "**/*Test\$*.class"
  includeEmptyDirs = false
  archiveName "test-support.jar"
}

artifacts {
  testSupport testSupportJar
}

dependencies {
  def libraries = rootProject.ext.libraries
  def acceptanceTestLibraries = rootProject.ext.acceptanceTestLibraries

  /* Compile/Dev Time */
  apt libraries.daggerCompiler
  apt libraries.lightCycleProcessor
  apt libraries.autoValue
  provided libraries.findBugsAnnotations
  provided libraries.findBugsJsr305
  provided libraries.intellijAnnotations
  provided libraries.autoValue

  /* SoundCloud Libraries */
  compile libraries.androidKit
  compile libraries.propeller
  compile libraries.skippy
  compile libraries.soundCloudVorbisEncoder
  compile libraries.lightCycle

  /* 3rd Party Libraries */
  compile libraries.comscore
  compile libraries.adjustAndroid
  compile libraries.dagger
  compile (libraries.crashlytics) {
    transitive = true
  }
  compile libraries.jacksonRespack
  compile libraries.okHttp
  provided libraries.httpClientAndroid
  compile libraries.localytics
  compile (libraries.slidingUpPanel) {
    transitive = true;
  }
  compile libraries.androidCrop
  compile libraries.rxAndroid
  compile libraries.rxJava
  compile libraries.rxJavaComputationExpressions
  compile libraries.rxJavaAsyncUtil // remove when getting rid of LegacyCommand
  compile libraries.universalImageLoader
  compile libraries.facebookRebound
  compile(libraries.facebookAndroidSdk) {
      // see https://github.com/mente/facebook-api-android-aar/issues/11
      transitive = true
  }
  compile libraries.butterKnife
  compile libraries.castCompanionLibrary
  compile libraries.undoBar

  /* Android ... keep order! */
  compile libraries.androidMultidex
  compile libraries.androidDesign
  compile libraries.androidSupportLibrary
  compile libraries.androidAppCompatLibrary
  compile libraries.androidMediaRouterLibrary
  compile libraries.androidRecyclerView
  compile libraries.androidCardView
  compile libraries.androidPlayServicesBase
  compile libraries.androidPlayServicesCast
  compile libraries.androidPlayServicesAnalytics

  /* Unit tests */
  testCompile unitTestLibraries.junit

  testCompile unitTestLibraries.assertjAndroid
  testCompile unitTestLibraries.androidSupportAnnotations
  testCompile unitTestLibraries.mockito
  testCompile unitTestLibraries.robolectric
  testCompile unitTestLibraries.modelCitizen
  testCompile unitTestLibraries.equalsVerifier
  testCompile unitTestLibraries.propellerTest

  /* Acceptance Tests */
  androidTestCompile(libraries.androidMultidexInstrumentation) {
    exclude group: 'com.android.support', module: 'multidex'
  }
  androidTestCompile acceptanceTestLibraries.hamcrest
  androidTestCompile acceptanceTestLibraries.robotium
  androidTestCompile acceptanceTestLibraries.networkManagerClient
}

int getNewVersionCode() {
  def manifestFile = file(rootProject.ext.manifestSrcFile)
  def manifestText = manifestFile.getText()
  def patternVersionCode = Pattern.compile('versionCode=\"(\\d+)\"')
  def matcherVersionCode = patternVersionCode.matcher(manifestText)
  matcherVersionCode.find()

  return ++Integer.parseInt(matcherVersionCode.group(1))
}
