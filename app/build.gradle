import java.util.regex.Pattern

ext {
  versionCode = getNewVersionCode()
  versionName = new Date().format('yy.MM.dd')
  releaseBody = System.env.containsKey('RELEASE_BODY') ? System.env.RELEASE_BODY : '' //'' signals local build
  releaseName = System.env.containsKey('RELEASE_NAME') ? System.env.RELEASE_NAME : '' //'' signals local build
  buildNumber = System.env.containsKey('BUILD_NUMBER') ? System.env.BUILD_NUMBER : '0' // '0' signals local build
  buildType   = System.env.containsKey('BUILD_TYPE') ? System.env.BUILD_TYPE : 'debug' // 'debug' signals local build
  gitBranch   = System.env.containsKey('GIT_BRANCH') ? System.env.GIT_BRANCH.replace('origin/','') : '' // '' signals local build
  apkPath     = "${project.buildDir}/outputs/apk/soundcloud-android-${versionName}-${buildType}.apk" // only used by renameApk task for CI
}

buildscript {
  repositories {
    maven { url 'https://maven.fabric.io/public' }
  }
  dependencies {
    classpath 'io.fabric.tools:gradle:1.+'
  }
}

def buildSrcDir = 'buildsystem'
apply from: "${buildSrcDir}/versionizer.gradle"
apply from: "${buildSrcDir}/static_analysis.gradle"
apply from: "${buildSrcDir}/ci.gradle"
apply from: "${buildSrcDir}/networkmanager.gradle"
apply from: "${buildSrcDir}/git.gradle"
apply from: "${buildSrcDir}/github.gradle"
apply from: "${buildSrcDir}/repacker/repacker.gradle"

apply plugin: 'com.android.application'
apply plugin: 'maven'
apply plugin: 'android-apt'
apply plugin: 'io.fabric'

def globalConfiguration = rootProject.extensions.getByName('ext')

android {
  compileSdkVersion globalConfiguration.getAt('androidCompileSdkVersion')
  buildToolsVersion globalConfiguration.getAt('androidBuildToolsVersion')

  testBuildType buildType

  defaultConfig {
    applicationId globalConfiguration.getAt('applicationId')
    minSdkVersion globalConfiguration.getAt('androidMinSdkVersion')
    targetSdkVersion globalConfiguration.getAt('androidTargetSdkVersion')
    testApplicationId globalConfiguration.getAt('testApplicationId')
    testInstrumentationRunner globalConfiguration.getAt('testInstrumentationRunner')
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  sourceSets {
    main {
      manifest.srcFile globalConfiguration.getAt('manifestSrcFile')
      java.srcDirs globalConfiguration.getAt('javaSrcDirs')
      res.srcDirs globalConfiguration.getAt('resSrcDirs')
      assets.srcDirs globalConfiguration.getAt('assetsSrcDirs')
      aidl.srcDirs globalConfiguration.getAt('javaSrcDirs')
    }
  }

  signingConfigs {
    debug {
      storeFile file('../debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }

    release {
      def propertiesFile = file('/home/mobile/installs/soundcloud_sign/release.properties')
      if (propertiesFile.exists() && propertiesFile.canRead()) {
        def releaseProperties = new Properties()
        releaseProperties.load(new FileInputStream(propertiesFile))
        storeFile file(releaseProperties.getProperty('storeFile'))
        storePassword releaseProperties.getProperty('storePassword')
        keyAlias releaseProperties.getProperty('keyAlias')
        keyPassword releaseProperties.getProperty('keyPassword')
      }
    }
  }

  buildTypes {
    releaseNoProguard {
      versionNameSuffix '-releaseNoProguard'
      debuggable false
      minifyEnabled false
      signingConfig signingConfigs.release
    }

    release.initWith(buildTypes.releaseNoProguard)
    release {
      versionNameSuffix '-release'
      minifyEnabled true
      shrinkResources false
      zipAlignEnabled true
      proguardFiles 'buildsystem/proguard.cfg', 'buildsystem/proguard_release.cfg'
    }

    release_non_play_store.initWith(buildTypes.release)
    release_non_play_store {
      versionNameSuffix '-release'
      signingConfig signingConfigs.release
    }

    beta.initWith(buildTypes.release)
    beta {
      versionNameSuffix '-beta'
      proguardFiles 'buildsystem/proguard.cfg'
    }

    alpha.initWith(buildTypes.release)
    alpha {
      minifyEnabled true
      versionNameSuffix '-alpha'
      ext.betaDistributionGroupAliases = 'soundcloud-alpha-testers'
      ext.betaDistributionNotifications = false
      proguardFiles 'buildsystem/proguard.cfg'
    }

    debug {
      versionNameSuffix '-debug'
      debuggable true
      signingConfig signingConfigs.debug
    }

    end2end.initWith(buildTypes.debug)
    end2end {
      versionNameSuffix '-end2end'
    }

    repack.initWith(buildTypes.debug)
    repack {
      minifyEnabled true
      proguardFiles 'buildsystem/repacker/proguard-repack.cfg'
    }
  }

  lintOptions {
    abortOnError false
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
  }

  dexOptions {
    incremental true
    jumboMode true
    preDexLibraries false
    javaMaxHeapSize "4g"
  }
}

/* Duplicate transitive dependencies on commons-logging, so exclude it.
 (e.g. Dependency commons-logging:commons-logging:1.1.1 is ignored for debug as it may be
 conflicting with the internal version provided by Android.
 */
configurations {
  all*.exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {
  def libraries = rootProject.ext.libraries
  def acceptanceTestLibraries = rootProject.ext.acceptanceTestLibraries

  /* Compile/Dev Time */
  apt libraries.daggerCompiler
  apt libraries.lightCycleProcessor
  provided libraries.findBugsAnnotations
  provided libraries.findBugsJsr305
  provided libraries.intellijAnnotations

  /* SoundCloud Libraries */
  compile libraries.propeller
  compile libraries.skippy
  compile libraries.soundCloudVorbisEncoder
  compile libraries.lightCycle

  /* 3rd Party Libraries */
  compile libraries.comscore
  compile libraries.adjustAndroid
  compile libraries.dagger
  compile libraries.guavaRepack
  compile (libraries.crashlytics) {
    transitive = true
  }
  compile libraries.jacksonRespack
  compile libraries.okHttp
  provided libraries.httpClientAndroid
  compile libraries.localytics
  compile (libraries.slidingUpPanel) {
    transitive = true;
  }
  compile libraries.androidCrop
  compile libraries.rxAndroid
  compile libraries.rxJava
  compile libraries.rxJavaComputationExpressions
  compile libraries.rxJavaAsyncUtil
  compile libraries.rxJavaDebug
  compile libraries.universalImageLoader
  compile libraries.facebookRebound
  compile(libraries.facebookAndroidSdk) {
      // see https://github.com/mente/facebook-api-android-aar/issues/11
      transitive = true
  }
  compile libraries.butterKnife
  compile libraries.castCompanionLibrary
  compile libraries.undoBar

  /* Android ... keep order! */
  compile libraries.androidSupportLibrary
  compile libraries.androidAppCompatLibrary
  compile libraries.androidMediaRouterLibrary
  compile libraries.androidPlayServicesBase
  compile libraries.androidPlayServicesCast

  /* Acceptance Tests */
  androidTestCompile acceptanceTestLibraries.hamcrest
  androidTestCompile acceptanceTestLibraries.robotium
  androidTestCompile acceptanceTestLibraries.networkManagerClient
}

int getNewVersionCode() {
  def manifestFile = file(rootProject.ext.manifestSrcFile)
  def manifestText = manifestFile.getText()
  def patternVersionCode = Pattern.compile('versionCode=\"(\\d+)\"')
  def matcherVersionCode = patternVersionCode.matcher(manifestText)
  matcherVersionCode.find()

  return ++Integer.parseInt(matcherVersionCode.group(1))
}
