import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

def libraries = rootProject.ext.libraries
def sourceSetMain = rootProject.extensions.getByName('ext').getAt('javaSrcDirs')
def reportDir = file("$buildDir/reports")
def staticAnalysisDirPath = "${projectDir}/static-analysis"

def includeSrcPatternApplication = 'com/soundcloud/android/**/*.java'
def includeSrcPatternApi = 'com/soundcloud/api/**/*.java'
def excludeSrcPatternRClass = 'com/soundcloud/android/**/R.java'
def excludeSrcPatternGeneratedFiles = '**/gen/**'

tasks.withType(Checkstyle) {
  repositories {
    maven { url "http://sevntu-checkstyle.github.com/sevntu.checkstyle/maven2" }
  }

  dependencies{
    checkstyle libraries.checkstyle
    checkstyle libraries.checkstyleSevntu
  }

  ignoreFailures true
  showViolations false
  configFile = file("${staticAnalysisDirPath}/checkstyle/config.xml")
  configProperties.checkstyleSuppressionsPath = file("${staticAnalysisDirPath}/checkstyle/suppressions.xml").absolutePath

  source sourceSetMain
  exclude excludeSrcPatternRClass
  exclude excludeSrcPatternGeneratedFiles

  classpath = files()

  reports {
    xml.enabled = true
    xml.destination = file("$reportDir/checkstyle/checkstyle.xml")
    html.enabled = false
  }
}

task checkstyle(type: Checkstyle) {
  description 'Checks whether Java source code complies with coding rules.'

  include includeSrcPatternApplication
  include includeSrcPatternApi
}

task checkstyleChanged(type: Checkstyle) {
  description 'Checks whether changed Java source code complies with coding rules.\n' +
          'The target branch to compare with can optionally be specified with build parameter \'branch\'.'

  doFirst {
    include getChangedFiles()
  }
}

tasks.withType(FindBugs) {
  ignoreFailures true
  effort = 'max'
  reportLevel = 'high'
  excludeFilter = file("${staticAnalysisDirPath}/findbugs/suppressions.xml")
  classes = files("$project.buildDir/intermediates/classes/")

  source sourceSetMain
  exclude excludeSrcPatternRClass
  exclude excludeSrcPatternGeneratedFiles

  classpath = files()

  reports {
    xml.enabled = true
    xml.destination = file("$reportDir/findbugs/findbugs.xml")
    html.enabled = false
  }
}

task findbugs(type: FindBugs, dependsOn: "assembleProd${project.('buildType').capitalize()}") {
  description 'Uses static analysis to look for bugs in Java code.'

  include includeSrcPatternApplication
  include includeSrcPatternApi
}

task findbugsChanged(type: FindBugs, dependsOn: "assembleProd${project.('buildType').capitalize()}") {
  description 'Uses static analysis to look for bugs in changed Java code.' +
          'The target branch to compare with can optionally be specified with build parameter \'branch\'.'

  doFirst {
    include getChangedFiles()
  }
}

pmd {
  toolVersion rootProject.ext.pmdVersion
}

tasks.withType(Pmd) {
  ignoreFailures true
  ruleSetFiles = files("${staticAnalysisDirPath}/pmd/config.xml")

  source sourceSetMain
  exclude excludeSrcPatternRClass
  exclude excludeSrcPatternGeneratedFiles

  reports {
    xml.enabled = true
    xml.destination = file("$reportDir/pmd/pmd.xml")
    html.enabled = false
  }
}


task pmd(type: Pmd) {
  description 'Finds common programming flaws through static analysis of code.'

  include includeSrcPatternApplication
  include includeSrcPatternApi
}

task pmdChanged(type: Pmd) {
  description 'Finds common programming flaws through static analysis of changed code.' +
          'The target branch to compare with can optionally be specified with build parameter \'branch\'.'

  doFirst {
    include getChangedFiles()
  }
}

android {
  lintOptions {
    abortOnError false
    lintConfig file("${staticAnalysisDirPath}/lint/config.xml")
    // To update the baseline file, just delete the existing one and execute lintProdPreRelease on top
    baseline file("${staticAnalysisDirPath}/lint/baseline-debug.xml")
  }
}

/**
 * Get all files that are changed but not deleted nor renamed.
 * Compares to master or the specified target branch.
 *
 * @return list of all changed files
 */
def getChangedFiles() {
  // Get the target and source branch
  def ghprbTargetBranch = System.getenv("ghprbTargetBranch")
  def ghprbSourceBranch = System.getenv("ghprbSourceBranch")

  // Compare to master if no branch specified
  def targetBranch
  if (project.hasProperty("branch")) {
    targetBranch = project.property("branch")
  } else {
    targetBranch = ghprbTargetBranch ? "origin/${ghprbTargetBranch}" : getParentBranch()
  }
  def sourceBranch = ghprbSourceBranch ? "origin/${ghprbSourceBranch}" : ""

  println "Note: diff \'$sourceBranch\' to \'$targetBranch\'"

  // Get list of all changed files including status
  def systemOutStream = new ByteArrayOutputStream()
  def command = "git diff --name-status --diff-filter=dr $targetBranch $sourceBranch"
  command.execute().waitForProcessOutput(systemOutStream, System.err)
  def allFiles = systemOutStream.toString().trim().split('\n')
  systemOutStream.close()

  // Remove the status prefix
  Pattern statusPattern = Pattern.compile("(\\w)\\t+(.+)")
  List<String> files = new ArrayList<>()
  for (file in allFiles) {
    Matcher matcher = statusPattern.matcher(file)
    if (matcher.find()) {
      files.add(matcher.group(2).replace("app/src/main/java/", ""))
    }
  }

  // Return the list of touched files
  files
}

/**
 * Determines the parent branch.
 *
 * @return the found parent branch or master if not possible
 */
def getParentBranch() {
  def branch = ""
  // Get short name of the HEAD branch
  def branchDeterminer = "git rev-parse --abbrev-ref HEAD".execute()
  branchDeterminer.in.eachLine { line -> branch = line }
  branchDeterminer.err.eachLine { line -> println line }
  branchDeterminer.waitFor()
  // Search all branches for parent
  def branchLine = 'git show-branch -a'.execute().text.readLines().find {
    it.contains('*') && !(it ==~ ".*\\[$branch[~^\\]].*")
  }
  try {
    // Filter parent branch name
    def parent = (branchLine =~ /\[([^~^\]]*)[~^\]]/)[0][1]
    return parent
  } catch (Exception ignored) {
    println "Could not determine parent branch, compare to master"
    return "master"
  }
}
