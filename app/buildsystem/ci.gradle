//Since for CI we always do full clean builds, we don't want to pre-dex
// See http://tools.android.com/tech-docs/new-build-system/tips
subprojects {
  project.plugins.whenPluginAdded { plugin ->
    if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    } else if ('com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    }
  }
}

task assembleCI(dependsOn: [':app:assembleDebug']) {
  description 'Assembles the main application. Used for CI since pre-dexing is disabled.'
  rootProject.ext.preDexLibs = false
}

task staticAnalysis(dependsOn: [':app:checkstyle', ':app:findbugs', ':app:pmd', ':app:lintDebug']) {
  description 'Performs static analysis of code.'
}
staticAnalysis.mustRunAfter assembleCI

task buildCI(dependsOn: [assembleCI, staticAnalysis]) {
  description 'Builds application for CI and executes static analysis.'
}

task generateRelease (dependsOn: ['assembleRelease']) {
  description = 'Generates a release version of the app by incrementing version code and name and signing the apk.'
}

task assembleAcceptanceTest(dependsOn: ['assembleAndroidTest']) {
  description 'Assembles all the Test applications.'
}

task runAcceptanceTestsSdk19(type: Exec) {
  description 'Runs the acceptance tests on SDK 19 devices from the CI using Rubotium.'
  def apkDir        = 'app/build/outputs/apk/'
  def runner        = "com.soundcloud.android.framework.runner.RandomizingRunner"
  def findTestApp   = "'find ${apkDir} -name \"app-debug-androidTest-unaligned.apk\"'"
  def findApp       = "'find ${apkDir} -regex \".*soundcloud-android-[0-9\\.]+-debug\\.apk\"'"
  def findHelperApp = "'find ${apkDir} -name \"soundcloud-android-network-manager-*-debug.apk\"'"

  commandLine "rubotium", "-t", "${findTestApp}", "-a", "${findApp}", "-r", "${runner}", "--sdk=19", "-d", "Nexus"
  //, "-H", "${findHelperApp}"
}
