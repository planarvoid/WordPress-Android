// Since for CI we always do full clean builds, we don't want to pre-dex
// See http://tools.android.com/tech-docs/new-build-system/tips
subprojects {
  project.plugins.whenPluginAdded { plugin ->
    if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    } else if ('com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    }
  }
}

task renameApk << {
  project.('android').applicationVariants.all { variant ->
    variant.outputs.each { output ->
      output.outputFile = new File(project.ext.apkPath)
    }
  }
}

task staticAnalysis(dependsOn: ['checkstyle', 'findbugs', 'pmd', "lint${project.buildType.capitalize()}"]) {
  description = 'Performs static analysis of code.'
}
staticAnalysis.mustRunAfter("assemble${project.buildType.capitalize()}")

// *********************************************************************************************************************
// DEBUG BUILDS
// *********************************************************************************************************************

task buildDebugCI(dependsOn: ['assembleDebug', 'staticAnalysis']) {
  description = 'Assembles Debug build and performs static analysis for CI.'
}
buildDebugCI.mustRunAfter('updateVersion')

task buildEnd2endCI(dependsOn: ['assembleEnd2end']) {
  description = 'Assembles End2End debug build for payments test on CI.'
  rootProject.ext.preDexLibs = false
}
buildEnd2endCI.mustRunAfter('updateVersion')

// *********************************************************************************************************************
// ALPHA BUILDS
// *********************************************************************************************************************

task updateAlphaVersion(dependsOn: ['incrementVersionName', 'setAlphaVersionCode']) {
  description = 'Updates local AndroidManifest versions for Alpha deploy.'
}

task buildAlpha(dependsOn: ['assembleAlpha']) {
  description = 'Assembles Alpha package.'
}
buildAlpha.mustRunAfter('updateAlphaVersion')

task deployAlpha(dependsOn: ['crashlyticsUploadDistributionAlpha']) {
  description = 'Deploys Alpha via Crashlytics Beta.'
}

// *********************************************************************************************************************
// BETA BUILDS
// *********************************************************************************************************************

task buildBetaCI(dependsOn: ['assembleBeta']) {
  description = 'Assembles Beta build for CI.'
}
buildBetaCI.mustRunAfter('updateVersion')

task deployBeta(dependsOn: ['commitVersionBump', 'uploadStoreBeta', 'uploadGithub']) {
  description = 'Deploy Beta build to playstore and github.'
}
deployBeta.mustRunAfter('buildBetaCI')

// *********************************************************************************************************************
// RELEASE BUILDS
// *********************************************************************************************************************

task buildReleaseNoProguardCI(dependsOn: ['assembleReleaseNoProguard', 'staticAnalysis']) {
  description = 'Assembles Release (without ProGuard!) build and performs static analysis for CI.'
}
buildReleaseNoProguardCI.mustRunAfter('updateVersion')

task buildAndDeployRelease(dependsOn: ['renameApk', 'commitVersionBump', 'assembleRelease', 'uploadStoreBeta',
                                       'uploadGithub' ]) {
  description = 'Builds and deploys Release build to playstore and github.'
}
assembleRelease.mustRunAfter('renameApk', 'commitVersionBump')

task buildReleaseNonPlayStore(dependsOn: ['assembleRelease_non_play_store']) {
  description = 'Assembles Release for Non Google Play Stores.'
}

// *********************************************************************************************************************
// HELPERS
// *********************************************************************************************************************

task updateVersion(dependsOn: ['renameApk', 'incrementVersionName', 'incrementVersionCode']) {
  description = 'Updates AndroidManifest versionName and versionCode and rename APK.'
}

task uploadStoreBeta(type: Exec) {
  description = 'Uploads apk to Google Play Store.'

  commandLine 'apublisher','-n', rootProject.applicationId, '-a', project.ext.apkPath, '-t', 'beta'
}

task slog(type: Exec) {
  description = 'Slog changes'
  version = "$project.ext.versionName-$project.ext.buildNumber-$project.buildType"

  commandLine 'curl', '--data', "channel=#android&message=slog: Released #android $version&username=The Release Captain", 'http://unslacked/'
}

task headsup(type: Exec) {
  commandLine 'curl', '--data', "channel=#android&message=https://www.soundcloud.com/nathanipale/boat-horn\nhttp://stream1.gifsoup.com/view5/4601496/love-boat-isaac-o.gif&username=The Boat", 'http://unslacked/'
}

// *********************************************************************************************************************
// ACCEPTANCE TESTS
// *********************************************************************************************************************

task assembleAcceptanceTest(dependsOn: ["assemble${project.buildType.capitalize()}AndroidTest"]) {
  description = 'Assembles all the Test applications.'
}

// WIP!!!
//task runAcceptanceTestsSdk19(type: Exec) {
//  description 'Runs the acceptance tests on SDK 19 devices from the CI using Rubotium.'
//  def apkDir        = 'app/build/outputs/apk/'
//  def runner        = "com.soundcloud.android.framework.runner.RandomizingRunner"
//  def findTestApp   = "`find ${apkDir} -name \"app-debug-androidTest-unaligned.apk\"`"
//  def findApp       = "`find ${apkDir} -regex \".*soundcloud-android-[0-9\\.]+-debug\\.apk\"`"
//  def findHelperApp = "`find ${apkDir} -name \"soundcloud-android-network-manager-*-debug.apk\"`"
//
//  commandLine "rubotium", "-t", "${findTestApp}", "-a", "${findApp}", "-r", "${runner}", "--sdk=19", "-d", "Nexus"
//  //, "-H", "${findHelperApp}"
//}

// *********************************************************************************************************************
// UNIT TESTS
// *********************************************************************************************************************

task runUnitTests(dependsOn: [':tests-robolectric:test']) {
  description = 'Run robolectric unit tests.'
}
