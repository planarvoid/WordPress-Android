def apkPath

// Since for CI we always do full clean builds, we don't want to pre-dex
// See http://tools.android.com/tech-docs/new-build-system/tips
subprojects {
  project.plugins.whenPluginAdded { plugin ->
    if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    } else if ('com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    }
  }
}

task renameApk << {
  project.('android').applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def newApkName = "soundcloud-android-${project.ext.versionName}-${variant.name}.apk"
      apkPath = "${project.buildDir}/outputs/apk/${newApkName}"
      output.outputFile = new File(apkPath)
    }
  }
}

task staticAnalysis(dependsOn: ['checkstyle', 'findbugs', 'pmd', 'lintDebug']) {
  description 'Performs static analysis of code.'
}
staticAnalysis.mustRunAfter('assembleDebugCI', 'assembleBetaCI', 'assembleReleaseCI')

// *********************************************************************************************************************
// DEBUG BUILDS
// *********************************************************************************************************************

task assembleDebugCI(dependsOn: ['renameApk', 'assembleDebug']) {
  description 'Assembles all Debug builds for CI. Pre-dexing is disabled.'
  rootProject.ext.preDexLibs = false
}

task buildDebugCI(dependsOn: ['assembleDebugCI', 'staticAnalysis']) {
  description 'Assembles all Debug builds and performs static analysis for CI.'
}

task assembleEnd2endCI(dependsOn: ['renameApk', 'assembleEnd2end']) {
  description 'Assembles End2End debug build for payments test on CI.'
  rootProject.ext.preDexLibs = false
}

// *********************************************************************************************************************
// BETA BUILDS
// *********************************************************************************************************************

task assembleBetaCI(dependsOn: ['renameApk', 'assembleBeta']) {
  description = 'Assembles all Beta builds for CI'
}

task buildBetaCI(dependsOn: ['assembleBetaCI', 'checkstyle', 'findbugs', 'pmd', 'lintBeta']) {
  description = 'Assembles all Beta builds and performs static analysis for CI.'
}

// *********************************************************************************************************************
// RELEASE BUILDS
// *********************************************************************************************************************

task assembleReleaseCI(dependsOn: ['renameApk', 'assembleRelease']) {
  description = 'Assembles all Release builds for CI'
}

task buildReleaseCI(dependsOn: ['assembleReleaseCI', 'checkstyle', 'findbugs', 'pmd', 'lintRelease']) {
  description = 'Assembles all Release builds and performs static analysis for CI.'
}

// *********************************************************************************************************************
// ACCEPTANCE TESTS
// *********************************************************************************************************************

task assembleAcceptanceTest(dependsOn: ['assembleDebugTest']) {
  description 'Assembles all the Test applications.'
}

// WIP!!!
//task runAcceptanceTestsSdk19(type: Exec) {
//  description 'Runs the acceptance tests on SDK 19 devices from the CI using Rubotium.'
//  def apkDir        = 'app/build/outputs/apk/'
//  def runner        = "com.soundcloud.android.framework.runner.RandomizingRunner"
//  def findTestApp   = "`find ${apkDir} -name \"app-debug-androidTest-unaligned.apk\"`"
//  def findApp       = "`find ${apkDir} -regex \".*soundcloud-android-[0-9\\.]+-debug\\.apk\"`"
//  def findHelperApp = "`find ${apkDir} -name \"soundcloud-android-network-manager-*-debug.apk\"`"
//
//  commandLine "rubotium", "-t", "${findTestApp}", "-a", "${findApp}", "-r", "${runner}", "--sdk=19", "-d", "Nexus"
//  //, "-H", "${findHelperApp}"
//}
