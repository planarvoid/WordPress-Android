// Since for CI we always do full clean builds, we don't want to pre-dex
// See http://tools.android.com/tech-docs/new-build-system/tips
subprojects {
  project.plugins.whenPluginAdded { plugin ->
    if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    } else if ('com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    }
  }
}

task staticAnalysis(dependsOn: ['checkstyle', 'findbugs', 'pmd', "lintProd${project.('buildType').capitalize()}",
                                "assembleProd${project.('buildType').capitalize()}"]) {
  description = 'Performs static analysis of code.'
}

// *********************************************************************************************************************
// DEBUG BUILDS
// *********************************************************************************************************************

task assembleDebugWrapper(dependsOn: 'assembleProdDebug')

task buildDebug(dependsOn: ['clean', 'versionizeDebug', 'assembleDebugWrapper', 'staticAnalysis']) {
  description = 'Assembles Debug build and performs static analysis for CI.'
}
assembleDebugWrapper.mustRunAfter('versionizeDebug')

task assembleEnd2endWrapper(dependsOn: 'assembleProdEnd2end')

task buildEnd2end(dependsOn: ['clean', 'versionizeDebug','assembleEnd2endWrapper']) {
  description = 'Assembles End2End debug build for payments test on CI.'
  rootProject.ext.preDexLibs = false
}
assembleEnd2endWrapper.mustRunAfter('versionizeDebug')

// *********************************************************************************************************************
// ALPHA BUILDS
// *********************************************************************************************************************

task assembleAlphaWrapper(dependsOn: 'assembleProdAlpha')

task buildAlpha(dependsOn: ['clean', 'versionizeAlpha', 'assembleAlphaWrapper']) {
  description = 'Assembles Alpha package for CI.'
}
assembleAlphaWrapper.mustRunAfter('versionizeAlpha')

task deployAlpha(dependsOn: ['crashlyticsUploadDistributionProdAlpha']) {
  description = 'Deploys Alpha via Crashlytics Beta.'
}

// *********************************************************************************************************************
// BETA BUILDS
// *********************************************************************************************************************

task assembleBetaWrapper(dependsOn: 'assembleProdBeta')

task buildBeta(dependsOn: ['clean', 'versionizeBeta', 'assembleBetaWrapper']) {
  description = 'Assembles Beta build for CI.'
}
assembleBetaWrapper.mustRunAfter('versionizeBeta')

task deployBeta(dependsOn: ['uploadGithubBeta', 'uploadBeta']) {
  description = 'Deploy Beta build to playstore and github.'
}
uploadBeta.mustRunAfter('uploadGithubBeta')

task buildFollowUpBeta(dependsOn: ['clean', 'versionizeFollowUpBeta', 'assembleBetaWrapper']) {
  description = 'Assembles follow up Beta build to Production Release for CI.'
}
assembleBetaWrapper.mustRunAfter('versionizeFollowUpBeta')

task deployFollowUpBeta(dependsOn: ['uploadGithubFollowUpBeta', 'uploadFollowUpBeta']) {
  description = 'Deploy Beta build to playstore and github.'
}
uploadFollowUpBeta.mustRunAfter('uploadGithubFollowUpBeta')

// *********************************************************************************************************************
// RELEASE BUILDS
// *********************************************************************************************************************

task assembleReleaseNoProguardWrapper(dependsOn: 'assembleProdReleaseNoProguard')

task buildReleaseNoProguard(dependsOn: ['clean', 'assembleReleaseNoProguardWrapper', 'staticAnalysis']) {
  description = 'Assembles Release (without ProGuard!) build and performs static analysis for CI.'
}
assembleReleaseNoProguard.mustRunAfter('clean')

task assembleReleaseWrapper(dependsOn: 'assembleProdRelease')

task buildRelease(dependsOn: ['clean', 'versionizeRelease', 'assembleReleaseWrapper']) {
  description = 'Assembles Release build for CI.'
}
assembleReleaseWrapper.mustRunAfter('versionizeRelease')

task deployRelease(dependsOn: ['uploadGithubRelease', 'rolloutOnePercent']) {
  description = 'Deploy Release build to playstore and github.'
}
rolloutOnePercent.mustRunAfter('uploadGithubRelease')

task buildReleaseNonPlayStore(dependsOn: ['clean', 'assembleRelease_non_play_store']) {
  description = 'Assembles Release for Non Google Play Stores for CI.'
}

// *********************************************************************************************************************
// HELPERS
// *********************************************************************************************************************

// TODO update this to use apk_finder and use new apk naming scheme

task slog(type: Exec) {
  description = 'Slog changes'
  version = "${project.('versionName')}-${project.('buildType')}"

  commandLine 'curl', '--data', "channel=#android&message=slog: Released #android $version&username=The Release Captain", 'http://unslacked/'
}

task headsup(type: Exec) {
  commandLine 'curl', '--data', "channel=#android&message=https://www.soundcloud.com/nathanipale/boat-horn\nhttp://stream1.gifsoup.com/view5/4601496/love-boat-isaac-o.gif&username=The Boat", 'http://unslacked/'
}

// *********************************************************************************************************************
// ACCEPTANCE TESTS
// *********************************************************************************************************************

task assembleAcceptanceTest(dependsOn: ["assembleProd${project.('buildType').capitalize()}AndroidTest"]) {
  description = 'Assembles all the Test applications.'
}

// *********************************************************************************************************************
// UNIT TESTS
// *********************************************************************************************************************

task runLegacyUnitTests(dependsOn: ':tests-robolectric:test') {
  description = 'Run legacy unit test suite based on Robolectric 1'
}

task runAppUnitTests(dependsOn: [':app:cleanTestDevDebugUnitTest', ':app:testDevDebugUnitTest']) {
  description = 'Run new unit test suite based on Robolectric 3'
}

task runUnitTests(dependsOn: ['runAppUnitTests', 'runLegacyUnitTests']) {
  description = 'Run all unit tests'
}
