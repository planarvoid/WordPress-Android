// Since for CI we always do full clean builds, we don't want to pre-dex
// See http://tools.android.com/tech-docs/new-build-system/tips
subprojects {
  project.plugins.whenPluginAdded { plugin ->
    if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    } else if ('com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    }
  }
}

task renameApk << {
  project.('android').applicationVariants.all { variant ->
    variant.outputs.each { output ->
      output.outputFile = new File("${project.('ext').apkPath}")
    }
  }
}

task staticAnalysis(dependsOn: ['checkstyle', 'findbugs', 'pmd', "lintProd${project.buildType.capitalize()}"]) {
  description = 'Performs static analysis of code.'
}
staticAnalysis.mustRunAfter("assembleProd${project.buildType.capitalize()}")

task updateVersion(dependsOn: ['renameApk', 'incrementVersionName', 'incrementVersionCode']) {
  description = 'Updates AndroidManifest versionName and versionCode and rename APK.'
}
updateVersion.mustRunAfter('clean')

// *********************************************************************************************************************
// DEBUG BUILDS
// *********************************************************************************************************************

task buildDebugCI(dependsOn: ['clean', 'assembleProdDebug', 'staticAnalysis']) {
  description = 'Assembles Debug build and performs static analysis for CI.'
}

task buildEnd2endCI(dependsOn: ['updateVersion','assembleEnd2end']) {
  description = 'Assembles End2End debug build for payments test on CI.'
  rootProject.ext.preDexLibs = false
}
assembleEnd2end.mustRunAfter('updateVersion')

// *********************************************************************************************************************
// ALPHA BUILDS
// *********************************************************************************************************************

task updateAlphaVersion(dependsOn: ['incrementVersionName', 'setAlphaVersionCode']) {
  description = 'Updates local AndroidManifest versions for Alpha deploy.'
}

task buildAlpha(dependsOn: ['clean', 'assembleProdAlpha']) {
  description = 'Assembles Alpha package.'
}
buildAlpha.mustRunAfter('updateAlphaVersion')

task deployAlpha(dependsOn: ['crashlyticsUploadDistributionProdAlpha']) {
  description = 'Deploys Alpha via Crashlytics Beta.'
}

// *********************************************************************************************************************
// BETA BUILDS
// *********************************************************************************************************************

task buildBetaCI(dependsOn: ['clean', 'updateVersion', 'assembleBeta']) {
  description = 'Assembles Beta build for CI.'
}
assembleBeta.mustRunAfter('updateVersion')

task deployBeta(dependsOn: ['uploadGithub', 'uploadBeta']) {
  description = 'Deploy Beta build to playstore and github.'
}
uploadBeta.mustRunAfter('uploadGithub')

// *********************************************************************************************************************
// RELEASE BUILDS
// *********************************************************************************************************************

task buildReleaseNoProguardCI(dependsOn: ['clean', 'assembleReleaseNoProguard', 'staticAnalysis']) {
  description = 'Assembles Release (without ProGuard!) build and performs static analysis for CI.'
}
assembleReleaseNoProguard.mustRunAfter('clean')
staticAnalysis.mustRunAfter('assembleReleaseNoProguard')

task buildReleaseCI(dependsOn: ['clean', 'updateVersion', 'assembleRelease']) {
  description = 'Assembles Release build for CI.'
}
assembleRelease.mustRunAfter('updateVersion')

task deployRelease(dependsOn: ['uploadGithub', 'rolloutOnePercent']) {
  description = 'Deploy Release build to playstore and github.'
}
rolloutOnePercent.mustRunAfter('uploadGithub')

task buildReleaseNonPlayStore(dependsOn: ['clean', 'assembleRelease_non_play_store']) {
  description = 'Assembles Release for Non Google Play Stores.'
}

// *********************************************************************************************************************
// HELPERS
// *********************************************************************************************************************

task uploadStoreBeta(type: Exec) {
  description = 'Uploads apk to Google Play Store.'

  commandLine 'apublisher', '-n', rootProject.applicationId, '-a', project.ext.apkPath, '-t', 'beta'
}

task slog(type: Exec) {
  description = 'Slog changes'
  version = "$project.ext.versionName-$project.ext.buildNumber-$project.buildType"

  commandLine 'curl', '--data', "channel=#android&message=slog: Released #android $version&username=The Release Captain", 'http://unslacked/'
}

task headsup(type: Exec) {
  commandLine 'curl', '--data', "channel=#android&message=https://www.soundcloud.com/nathanipale/boat-horn\nhttp://stream1.gifsoup.com/view5/4601496/love-boat-isaac-o.gif&username=The Boat", 'http://unslacked/'
}

// *********************************************************************************************************************
// ACCEPTANCE TESTS
// *********************************************************************************************************************

task assembleAcceptanceTest(dependsOn: ["assembleProd${project.buildType.capitalize()}AndroidTest"]) {
  description = 'Assembles all the Test applications.'
}

// *********************************************************************************************************************
// UNIT TESTS
// *********************************************************************************************************************

task runLegacyUnitTests(dependsOn: ':tests-robolectric:test') {
  description = 'Run legacy unit test suite based on Robolectric 1'
}

task runAppUnitTests(dependsOn: [':app:cleanTestDevDebugUnitTest', ':app:testDevDebugUnitTest']) {
  description = 'Run new unit test suite based on Robolectric 3'
}

task runUnitTests(dependsOn: ['runAppUnitTests', 'runLegacyUnitTests']) {
  description = 'Run all unit tests'
}
