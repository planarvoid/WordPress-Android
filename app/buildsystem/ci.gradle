// Since for CI we always do full clean builds, we don't want to pre-dex
// See http://tools.android.com/tech-docs/new-build-system/tips
subprojects {
  project.plugins.whenPluginAdded { plugin ->
    if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    } else if ('com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    }
  }
}

// *********************************************************************************************************************
// DEBUG BUILDS
// *********************************************************************************************************************

task assembleDebugWrapper(dependsOn: 'assembleProdDebug')
assembleDebugWrapper.mustRunAfter('versionizeDebug')

task buildDebug(dependsOn: ['assembleDebugApk', 'staticAnalysis']) {
  description = 'Assembles Debug build and performs static analysis for CI.'
}

task buildDebugPR(dependsOn: ['assembleDebugApk', 'assembleAcceptanceTest']) {
  description = 'Assembles Debug build for PR build.'
}

task buildPR(dependsOn: ['assembleDebugApk', 'staticAnalysisChanged']) {
  description = 'Assembles Debug build and performs static analysis of changed files for CI.'
}

task assembleDebugApk(dependsOn: ['clean', 'versionizeDebug', 'assembleDebugWrapper']) {
  description = 'Assembles Debug build.'
}

// *********************************************************************************************************************
// ALPHA BUILDS
// *********************************************************************************************************************

task assembleAlphaWrapper(dependsOn: 'assembleProdAlpha')

task buildAlpha(dependsOn: ['clean', 'versionizeAlpha', 'assembleAlphaWrapper']) {
  description = 'Assembles Alpha package for CI.'
}
assembleAlphaWrapper.mustRunAfter('versionizeAlpha')

task deployAlpha(dependsOn: ['crashlyticsUploadDistributionProdAlpha', 'slogAlpha']) {
  description = 'Deploys Alpha via Crashlytics Beta.'
}

// *********************************************************************************************************************
// BETA BUILDS
// *********************************************************************************************************************

task assembleBetaWrapper(dependsOn: 'assembleProdBeta')

task buildBeta(dependsOn: ['clean', 'versionizeBeta', 'assembleBetaWrapper']) {
  description = 'Assembles Beta build for CI.'
}
assembleBetaWrapper.mustRunAfter('versionizeBeta')

task deployBeta(dependsOn: ['uploadGithubBeta', 'uploadBeta', 'slogBeta']) {
  description = 'Deploy Beta build to playstore and github.'
}
uploadBeta.mustRunAfter('uploadGithubBeta')
slogBeta.mustRunAfter('uploadBeta')

task buildFollowUpBeta(dependsOn: ['clean', 'versionizeFollowUpBeta', 'assembleBetaWrapper']) {
  description = 'Assembles follow up Beta build to Production Release for CI.'
}
assembleBetaWrapper.mustRunAfter('versionizeFollowUpBeta')

task deployFollowUpBeta(dependsOn: ['uploadGithubFollowUpBeta', 'uploadFollowUpBeta', 'slogFollowUpBeta']) {
  description = 'Deploy Beta build to playstore and github.'
}
uploadFollowUpBeta.mustRunAfter('uploadGithubFollowUpBeta')
slogFollowUpBeta.mustRunAfter('uploadFollowUpBeta')

// *********************************************************************************************************************
// RELEASE BUILDS
// *********************************************************************************************************************

task assemblePreReleaseWrapper(dependsOn: 'assembleProdPreRelease')

task buildPreRelease(dependsOn: ['clean', 'versionizePreRelease', 'assemblePreReleaseWrapper']) {
  description = 'Assembles Pre-Release (without ProGuard!) build for CI.'
}
task buildPreReleasePR(dependsOn: ['clean', 'versionizePreRelease', 'assemblePreReleaseWrapper', 'assembleAcceptanceTest']) {
  description = 'Assembles Release (without ProGuard!) build for PR build.'
}

assemblePreReleaseWrapper.mustRunAfter('versionizePreRelease')

task assembleReleaseWrapper(dependsOn: 'assembleProdRelease')

task buildRelease(dependsOn: ['clean', 'versionizeRelease', 'assembleReleaseWrapper']) {
  description = 'Assembles Release build for CI.'
}
assembleReleaseWrapper.mustRunAfter('versionizeRelease')

task deployReleaseOnePercent(dependsOn: ['uploadGithubRelease', 'rolloutOnePercent', 'slogRolloutOnePercent']) {
  description = 'Deploy Release build to playstore (1% rollout) and github.'
}
rolloutOnePercent.mustRunAfter('uploadGithubRelease')
slogRolloutOnePercent.mustRunAfter('rolloutOnePercent')

task deployReleaseTwentyPercent(dependsOn: ['rolloutTwentyPercent', 'slogRolloutTwentyPercent']) {
  description = 'Deploy Release build to playstore (20% rollout).'
}
slogRolloutTwentyPercent.mustRunAfter('rolloutTwentyPercent')

task deployReleaseRolloutFull(dependsOn: ['rolloutFull', 'slogRolloutFull', 'logVersion']) {
  description = 'Deploy Release build to playstore (100% rollout).'
}
slogRolloutFull.mustRunAfter('rolloutFull')
logVersion.mustRunAfter('slogRolloutFull')

task buildReleaseNonPlayStore(dependsOn: ['clean', 'assembleReleaseNonPlayStore']) {
  description = 'Assembles Release for Non Google Play Stores for CI.'
}

// *********************************************************************************************************************
// HELPERS
// *********************************************************************************************************************

// TODO update this to use apk_finder and use new apk naming scheme

task slog(type: Exec) {
  description = 'Slog changes'
  version = "${project.('versionName')}-${project.('buildType')}"

  commandLine 'curl', '--data', "channel=#android&message=slog: Released #android $version&username=The Release Captain", 'http://unslacked/'
}

task headsup(type: Exec) {
  commandLine 'curl', '--data', "channel=#android&message=https://www.soundcloud.com/nathanipale/boat-horn\nhttp://stream1.gifsoup.com/view5/4601496/love-boat-isaac-o.gif&username=The Boat", 'http://unslacked/'
}

// *********************************************************************************************************************
// ACCEPTANCE TESTS
// *********************************************************************************************************************

task assembleAcceptanceTest(dependsOn: ["assembleProd${project.('buildType').capitalize()}AndroidTest"]) {
  description = 'Assembles the Test application.'
}

assembleAcceptanceTest.mustRunAfter('assemblePreReleaseWrapper')
assembleAcceptanceTest.mustRunAfter('assembleDebugApk')

task runAcceptanceTests(dependsOn: ['assembleAcceptanceTest', 'connectedAndroidTest']) {
  description 'Installs and runs the tests for Debug build on connected devices.'
}

// Firebase TestLab
task assembleAppApkForFirebase(dependsOn: ':app:assembleDevDebug')

task assembleTestApkForFirebase(dependsOn: ':app:assembleProdDebugAndroidTest')

task assembleApksForFirebase(dependsOn: ['assembleAppApkForFirebase', 'assembleTestApkForFirebase'])

task runAcceptanceTestsOnFirebase(type: Exec ) {
  description 'Assembles App and Test apks for execution on Firebase Test Lab.'
  workingDir "$rootDir"
  commandLine './scripts/flank_test.sh'
}
runAcceptanceTestsOnFirebase.mustRunAfter('assembleAppApkForFirebase', 'assembleTestApkForFirebase')
