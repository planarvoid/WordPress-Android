import se.bjurr.violations.comments.github.plugin.gradle.ViolationCommentsToGitHubGradlePlugin
import se.bjurr.violations.comments.github.plugin.gradle.ViolationCommentsToGitHubTask
import se.bjurr.violations.lib.model.SEVERITY

buildscript {
  repositories {
    mavenLocal()
    maven { url 'https://plugins.gradle.org/m2/' }
  }
  dependencies {
    classpath 'se.bjurr.violations:violation-comments-to-github-gradle-plugin:1.26'
  }
}

// Since for CI we always do full clean builds, we don't want to pre-dex
// See http://tools.android.com/tech-docs/new-build-system/tips
subprojects {
  project.plugins.whenPluginAdded { plugin ->
    if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    } else if ('com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    }
  }
}

task staticAnalysis(dependsOn: ['checkstyle', 'findbugs', 'pmd', "lintProd${project.('buildType').capitalize()}",
                                "assembleProd${project.('buildType').capitalize()}"]) {
  description = 'Performs static analysis of code.'
}

if (System.env.containsKey('JENKINS_URL')) {
  apply plugin: ViolationCommentsToGitHubGradlePlugin
  task violationCommentsToGitHub(type: ViolationCommentsToGitHubTask) {
    description "Finds report files from static code analysis and comment pull requests in GitHub with them."

    repositoryOwner = "soundcloud"
    repositoryName = "android-listeners"

    pullRequestId = System.getenv('ghprbPullId')
    oAuth2Token = System.getenv('GITHUB_ACCESS_TOKEN')
    gitHubUrl = "https://api.github.com/"

    minSeverity = SEVERITY.INFO //ERROR, INFO, WARN
    violations = [
            ["FINDBUGS",    "app/build/reports", ".*/findbugs/.*\\.xml\$"],
            ["PMD",         "app/build/reports", ".*/pmd/.*\\.xml\$"],
            ["CHECKSTYLE",  "app/build/reports", ".*/checkstyle/.*\\.xml\$"],
            ["ANDROIDLINT", "app/build/reports", ".*/lint-.*\\.xml\$"]
    ]
  }
  violationCommentsToGitHub.mustRunAfter('staticAnalysis')
}

// *********************************************************************************************************************
// DEBUG BUILDS
// *********************************************************************************************************************

task assembleDebugWrapper(dependsOn: 'assembleProdDebug')
assembleDebugWrapper.mustRunAfter('versionizeDebug')

task buildDebug(dependsOn: ['clean', 'versionizeDebug', 'assembleDebugWrapper', 'staticAnalysis']) {
  description = 'Assembles Debug build and performs static analysis for CI.'
}

task assembleDebugApk(dependsOn: ['clean', 'versionizeDebug', 'assembleDebugWrapper']) {
  description = 'Assembles Debug build.'
}

// *********************************************************************************************************************
// ALPHA BUILDS
// *********************************************************************************************************************

task assembleAlphaWrapper(dependsOn: 'assembleProdAlpha')

task buildAlpha(dependsOn: ['clean', 'versionizeAlpha', 'assembleAlphaWrapper']) {
  description = 'Assembles Alpha package for CI.'
}
assembleAlphaWrapper.mustRunAfter('versionizeAlpha')

task deployAlpha(dependsOn: ['crashlyticsUploadDistributionProdAlpha']) {
  description = 'Deploys Alpha via Crashlytics Beta.'
}

// *********************************************************************************************************************
// BETA BUILDS
// *********************************************************************************************************************

task assembleBetaWrapper(dependsOn: 'assembleProdBeta')

task buildBeta(dependsOn: ['clean', 'versionizeBeta', 'assembleBetaWrapper']) {
  description = 'Assembles Beta build for CI.'
}
assembleBetaWrapper.mustRunAfter('versionizeBeta')

task deployBeta(dependsOn: ['uploadGithubBeta', 'uploadBeta', 'slogBeta']) {
  description = 'Deploy Beta build to playstore and github.'
}
uploadBeta.mustRunAfter('uploadGithubBeta')
slogBeta.mustRunAfter('uploadBeta')

task buildFollowUpBeta(dependsOn: ['clean', 'versionizeFollowUpBeta', 'assembleBetaWrapper']) {
  description = 'Assembles follow up Beta build to Production Release for CI.'
}
assembleBetaWrapper.mustRunAfter('versionizeFollowUpBeta')

task deployFollowUpBeta(dependsOn: ['uploadGithubFollowUpBeta', 'uploadFollowUpBeta', 'slogFollowUpBeta']) {
  description = 'Deploy Beta build to playstore and github.'
}
uploadFollowUpBeta.mustRunAfter('uploadGithubFollowUpBeta')
slogFollowUpBeta.mustRunAfter('uploadFollowUpBeta')

// *********************************************************************************************************************
// RELEASE BUILDS
// *********************************************************************************************************************

task assemblePreReleaseWrapper(dependsOn: 'assembleProdPreRelease')

task buildPreRelease(dependsOn: ['clean', 'versionizePreRelease', 'assemblePreReleaseWrapper',
                                 'staticAnalysis']) {
  description = 'Assembles Release (without ProGuard!) build and performs static analysis for CI.'
}
assemblePreReleaseWrapper.mustRunAfter('versionizePreRelease')

task assembleReleaseWrapper(dependsOn: 'assembleProdRelease')

task buildRelease(dependsOn: ['clean', 'versionizeRelease', 'assembleReleaseWrapper']) {
  description = 'Assembles Release build for CI.'
}
assembleReleaseWrapper.mustRunAfter('versionizeRelease')

task deployReleaseOnePercent(dependsOn: ['uploadGithubRelease', 'rolloutOnePercent', 'slogRolloutOnePercent']) {
  description = 'Deploy Release build to playstore (1% rollout) and github.'
}
rolloutOnePercent.mustRunAfter('uploadGithubRelease')
slogRolloutOnePercent.mustRunAfter('rolloutOnePercent')

task deployReleaseTwentyPercent(dependsOn: ['rolloutTwentyPercent', 'slogRolloutTwentyPercent']) {
  description = 'Deploy Release build to playstore (20% rollout).'
}
slogRolloutTwentyPercent.mustRunAfter('rolloutTwentyPercent')

task deployReleaseRolloutFull(dependsOn: ['rolloutFull', 'slogRolloutFull']) {
  description = 'Deploy Release build to playstore (100% rollout).'
}
slogRolloutFull.mustRunAfter('rolloutFull')

task buildReleaseNonPlayStore(dependsOn: ['clean', 'assembleReleaseNonPlayStore']) {
  description = 'Assembles Release for Non Google Play Stores for CI.'
}

// *********************************************************************************************************************
// HELPERS
// *********************************************************************************************************************

// TODO update this to use apk_finder and use new apk naming scheme

task slog(type: Exec) {
  description = 'Slog changes'
  version = "${project.('versionName')}-${project.('buildType')}"

  commandLine 'curl', '--data', "channel=#android&message=slog: Released #android $version&username=The Release Captain", 'http://unslacked/'
}

task headsup(type: Exec) {
  commandLine 'curl', '--data', "channel=#android&message=https://www.soundcloud.com/nathanipale/boat-horn\nhttp://stream1.gifsoup.com/view5/4601496/love-boat-isaac-o.gif&username=The Boat", 'http://unslacked/'
}

task uploadTrackingScenario() << {
  def path = "$rootDir/app/src/androidTest/res/com/soundcloud/android/framework/helpers/mrlogga/"
  def dir = new File(path).list().toList()

  for (spec in dir) {
    println "Uploading ${spec}..."

    exec {
      executable "curl"
      args "-X", "POST", "-F", "file=@$path/$spec", 'http://ci.mobile.s-cloud.net:4567/upload_scenario'
    }
  }
}

task downloadNetworkManagerApkCI() {
  description 'No-op implementation to be backwards compatible.'
  // TODO: Remove once DROID-1253 is done.
}

// *********************************************************************************************************************
// ACCEPTANCE TESTS
// *********************************************************************************************************************

task assembleAcceptanceTest(dependsOn: ["assembleProd${project.('buildType').capitalize()}AndroidTest"]) {
  description = 'Assembles the Test application.'
}

task runAcceptanceTests(dependsOn: ['assembleAcceptanceTest', 'connectedAndroidTest']) {
  description 'Installs and runs the tests for Debug build on connected devices.'
}

// *********************************************************************************************************************
// UNIT TESTS
// *********************************************************************************************************************

task runUnitTests(dependsOn: [':app:cleanTestDevDebugUnitTest', ':app:testDevDebugUnitTest']) {
  description = 'Run aplication unit tests'
}
