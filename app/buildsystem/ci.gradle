import static groovy.io.FileType.*

// Since for CI we always do full clean builds, we don't want to pre-dex
// See http://tools.android.com/tech-docs/new-build-system/tips
subprojects {
  project.plugins.whenPluginAdded { plugin ->
    if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    } else if ('com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    }
  }
}

task renameApk << {
  project.('android').applicationVariants.all { variant ->
    variant.outputs.each { output ->
      output.outputFile = new File(project.ext.apkPath)
    }
  }
}

task staticAnalysis(dependsOn: ['checkstyle', 'findbugs', 'pmd', "lintProd${project.buildType.capitalize()}"]) {
  description = 'Performs static analysis of code.'
}
staticAnalysis.mustRunAfter("assembleProd${project.buildType.capitalize()}")

// *********************************************************************************************************************
// DEBUG BUILDS
// *********************************************************************************************************************

task buildDebugCI(dependsOn: ['clean', 'assembleProdDebug', 'staticAnalysis']) {
  description = 'Assembles Debug build and performs static analysis for CI.'
}
buildDebugCI.mustRunAfter('updateVersion')

task buildEnd2endCI(dependsOn: ['assembleEnd2end']) {
  description = 'Assembles End2End debug build for payments test on CI.'
  rootProject.ext.preDexLibs = false
}
buildEnd2endCI.mustRunAfter('updateVersion')

// *********************************************************************************************************************
// ALPHA BUILDS
// *********************************************************************************************************************

task updateAlphaVersion(dependsOn: ['incrementVersionName', 'setAlphaVersionCode']) {
  description = 'Updates local AndroidManifest versions for Alpha deploy.'
}

task buildAlpha(dependsOn: ['clean', 'assembleProdAlpha']) {
  description = 'Assembles Alpha package.'
}
buildAlpha.mustRunAfter('updateAlphaVersion')

task deployAlpha(dependsOn: ['crashlyticsUploadDistributionProdAlpha']) {
  description = 'Deploys Alpha via Crashlytics Beta.'
}

// *********************************************************************************************************************
// BETA BUILDS
// *********************************************************************************************************************

task buildBetaCI(dependsOn: ['clean', 'assembleBeta']) {
  description = 'Assembles Beta build for CI.'
}
buildBetaCI.mustRunAfter('updateVersion')

task deployBeta(dependsOn: ['commitVersionBump', 'uploadStoreBeta', 'uploadGithub']) {
  description = 'Deploy Beta build to playstore and github.'
}
deployBeta.mustRunAfter('buildBetaCI')

// *********************************************************************************************************************
// RELEASE BUILDS
// *********************************************************************************************************************

task buildReleaseNoProguardCI(dependsOn: ['clean', 'assembleReleaseNoProguard', 'staticAnalysis']) {
  description = 'Assembles Release (without ProGuard!) build and performs static analysis for CI.'
}
buildReleaseNoProguardCI.mustRunAfter('updateVersion')

task buildReleaseCI(dependsOn: ['clean', 'assembleRelease']) {
  description = 'Assembles Release build for CI.'
}
buildReleaseCI.mustRunAfter('updateVersion')

// NOTE: Uploading to Play Store's beta track is the expected operation here, due to differences in the way we version
// releases versus how Google versions releases. We must upload the release apk (with a version code bump!) to the beta
// track and then manually bump that apk to the release track in the play store.
task deployReleaseCI(dependsOn: ['commitVersionBump', 'uploadStoreBeta', 'uploadGithub']) {
  description = 'Deploy Release build to playstore and github.'
}
deployReleaseCI.mustRunAfter('buildReleaseCI')

task buildReleaseNonPlayStore(dependsOn: ['clean', 'assembleRelease_non_play_store']) {
  description = 'Assembles Release for Non Google Play Stores.'
}

// *********************************************************************************************************************
// HELPERS
// *********************************************************************************************************************

task updateVersion(dependsOn: ['renameApk', 'incrementVersionName', 'incrementVersionCode']) {
  description = 'Updates AndroidManifest versionName and versionCode and rename APK.'
}

def String findApkPath(buildType) {
  def baseDir = new File("$project.ext.outputsDir")
  def names = []
  def pattern = "soundcloud-android-.*-${buildType}.apk"

  baseDir.eachFileMatch FILES, ~/${pattern}/, { names << it.name }
  if (names.size() != 1) {
    throw new GradleException("unable to find apk path for buildType ${buildType}")
  }
  return "$project.ext.outputsDir/${names[0]}"
}

task uploadStoreBeta(type: Exec) {
  description = 'Uploads apk to Google Play Store.'

  commandLine 'apublisher', '-n', rootProject.applicationId, '-a', project.ext.apkPath, '-t', 'beta'
}

task newUploadStoreBeta {
  description = 'Uploads apk to Google Play Store Beta Track.'

  doLast {
    def cmd = ['apublisher', '-n', rootProject.applicationId, '-a', findApkPath("debug"), '-t', 'beta']
    def p = cmd.execute()
    p.waitFor()
    def exitValue = p.exitValue()
    if (exitValue != 0) {
      throw new Exception("Uploads apk to Google Play Store Beta Track failed: ($cmd) exitValue: $exitValue")
    }
  }
}

task rolloutOnePercent {
  description = 'Rolls the app out to 1% of user base'

  doLast {
    def cmd = ['apublisher', '-n', rootProject.applicationId, '-a', findApkPath("release"), '-t', 'rollout']
    def p = cmd.execute()
    p.waitFor()
    def exitValue = p.exitValue()
    if (exitValue != 0) {
      throw new Exception("Rollout to 1% failed: ($cmd) exitValue: $exitValue")
    }
  }
}

task rolloutFivePercent {
  description = 'Rolls the app out to 5% of user base'

  doLast {
    def cmd = ['apublisher', '-n', rootProject.applicationId, '-a', findApkPath("release"), '-t', 'rollout', '--fraction', '0.05']
    def p = cmd.execute()
    p.waitFor()
    def exitValue = p.exitValue()
    if (exitValue != 0) {
      throw new Exception("Rollout to 5% failed: ($cmd) exitValue: $exitValue")
    }
  }
}

task rolloutFull {
  description = 'Rolls the app out to 100% of user base'

  doLast {
    def cmd = ['apublisher', '-n', rootProject.applicationId, '-a', findApkPath("release"), '-t', 'rollout', '--fraction', '0']
    def p = cmd.execute()
    p.waitFor()
    def exitValue = p.exitValue()
    if (exitValue != 0) {
      throw new Exception("Rollout to 100% failed: ($cmd) exitValue: $exitValue")
    }
  }
}

task slog(type: Exec) {
  description = 'Slog changes'
  version = "$project.ext.versionName-$project.ext.buildNumber-$project.buildType"

  commandLine 'curl', '--data', "channel=#android&message=slog: Released #android $version&username=The Release Captain", 'http://unslacked/'
}

task headsup(type: Exec) {
  commandLine 'curl', '--data', "channel=#android&message=https://www.soundcloud.com/nathanipale/boat-horn\nhttp://stream1.gifsoup.com/view5/4601496/love-boat-isaac-o.gif&username=The Boat", 'http://unslacked/'
}

// *********************************************************************************************************************
// ACCEPTANCE TESTS
// *********************************************************************************************************************

task assembleAcceptanceTest(dependsOn: ["assembleProd${project.buildType.capitalize()}AndroidTest"]) {
  description = 'Assembles all the Test applications.'
}

// *********************************************************************************************************************
// UNIT TESTS
// *********************************************************************************************************************

task runLegacyUnitTests(dependsOn: ':tests-robolectric:test') {
  description = 'Run legacy unit test suite based on Robolectric 1'
}

task runAppUnitTests(dependsOn: [':app:cleanTestDevDebugUnitTest', ':app:testDevDebugUnitTest']) {
  description = 'Run new unit test suite based on Robolectric 3'
}

task runUnitTests(dependsOn: ['runAppUnitTests', 'runLegacyUnitTests']) {
  description = 'Run all unit tests'
}
