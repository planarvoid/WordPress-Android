apply plugin: 'com.android.application'

android {
  testBuildType buildType

  signingConfigs {
    debug {
      storeFile file('../debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }

    release {
      def propertiesFile = file('/home/mobile/installs/soundcloud_sign/release.properties')
      if (propertiesFile.exists() && propertiesFile.canRead()) {
        def releaseProperties = new Properties()
        releaseProperties.load(new FileInputStream(propertiesFile))
        storeFile file(releaseProperties.getProperty('storeFile'))
        storePassword releaseProperties.getProperty('storePassword')
        keyAlias releaseProperties.getProperty('keyAlias')
        keyPassword releaseProperties.getProperty('keyPassword')
      }
    }
  }

  afterEvaluate {
    android.applicationVariants.each { variant ->
      def appId = variant.applicationId
      String accountAuthority = appId + ".provider.ScContentProvider"
      variant.buildConfigField "String", "ACCOUNT_AUTHORITY", "\"$accountAuthority\""

      variant.resValue "string", "app_id", appId
      variant.resValue "string", "account_type", "${appId}.account"
      variant.resValue "string", "account_authority", accountAuthority
    }
  }

  buildTypes {
    preRelease {
      versionNameSuffix '-preRelease'
      debuggable false
      minifyEnabled false
      signingConfig signingConfigs.release
      multiDexEnabled true
      buildConfigField "boolean", "RUN_ADS_TEST", "false"
      buildConfigField "String", "APP_ENVIRONMENT", "\"prod\""
    }

    release.initWith(buildTypes.preRelease)
    release {
      versionNameSuffix '-release'
      minifyEnabled true
      shrinkResources false
      zipAlignEnabled true
      proguardFiles = ['buildsystem/proguard.cfg', 'buildsystem/proguard_release.cfg']
      buildConfigField "boolean", "RUN_ADS_TEST", "false"
    }

    releaseNonPlayStore.initWith(buildTypes.release)
    releaseNonPlayStore {
      versionNameSuffix '-release'
      signingConfig signingConfigs.release
      buildConfigField "boolean", "RUN_ADS_TEST", "false"
    }

    beta.initWith(buildTypes.release)
    beta {
      versionNameSuffix '-beta'
      proguardFiles = ['buildsystem/proguard.cfg']
      buildConfigField "boolean", "RUN_ADS_TEST", "true"
      buildConfigField "String", "APP_ENVIRONMENT", "\"beta\""
    }

    alpha.initWith(buildTypes.release)
    alpha {
      applicationIdSuffix '.alpha'
      versionNameSuffix '-alpha'
      debuggable true
      ext.betaDistributionGroupAliases = 'soundcloud-alpha-testers'
      ext.betaDistributionNotifications = false
      proguardFiles = ['buildsystem/proguard.cfg']
      buildConfigField "boolean", "RUN_ADS_TEST", "false"
      buildConfigField "String", "APP_ENVIRONMENT", "\"alpha\""
    }

    debug {
      applicationIdSuffix '.debug'
      versionNameSuffix '-debug'
      debuggable true
      signingConfig signingConfigs.debug
      proguardFiles ['buildsystem/proguard.cfg']
      minifyEnabled project.hasProperty('proguard')
      multiDexEnabled true
      buildConfigField "boolean", "RUN_ADS_TEST", "true"
      buildConfigField "String", "APP_ENVIRONMENT", "\"dev\""
    }
  }

  productFlavors {
    dev {
      // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
      // to pre-dex each module and produce an APK that can be tested on
      // Android Lollipop without time consuming dex merging processes.
      minSdkVersion 21
    }

    prod {
      minSdkVersion project.ext.androidMinSdkVersion
    }
  }

  variantFilter { variant ->
    if (isNonDebugDevVariant(variant)) {
      variant.setIgnore(true);
    }
  }

}

def isNonDebugDevVariant(def variant) {
  variant.getFlavors().get(0).name.equals('dev') && !variant.buildType.name.equals('debug')
}

