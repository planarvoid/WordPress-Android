apply plugin: 'com.android.application'

def BOOLEAN = "boolean"
def TRUE = "true"
def FALSE = "false"
//def FEATURE = "FEATURE"

def flags = [
  FEATURE_PAYMENTS_TEST: 'FEATURE_PAYMENTS_TEST',
  FEATURE_SOUNDCLOUD_GO: 'FEATURE_SOUNDCLOUD_GO',
  FEATURE_STATIONS_HOME: 'FEATURE_STATIONS_HOME',
  FEATURE_PUBLISH_PLAY_EVENTS_TO_TPUB: 'FEATURE_PUBLISH_PLAY_EVENTS_TO_TPUB',
  FEATURE_VIDEO_ADS: 'FEATURE_VIDEO_ADS',
  FEATURE_SERVE_DEMO_VIDEO_AD: 'FEATURE_SERVE_DEMO_VIDEO_AD',
  FEATURE_WAVEFORM_SPRING: 'FEATURE_WAVEFORM_SPRING',
  FEATURE_DISCOVERY_RECOMMENDATIONS: 'FEATURE_DISCOVERY_RECOMMENDATIONS',
  FEATURE_DISCOVERY_CHARTS: 'FEATURE_DISCOVERY_CHARTS',
  FEATURE_PROFILE_NEW_TABS: 'FEATURE_PROFILE_NEW_TABS',
  FEATURE_EXPLODE_PLAYLISTS_IN_PLAYQUEUES: 'FEATURE_EXPLODE_PLAYLISTS_IN_PLAYQUEUES',
  FEATURE_NEW_NOTIFICATION_SETTINGS: 'FEATURE_NEW_NOTIFICATION_SETTINGS',
  FEATURE_AUTO_REFRESH_STREAM: 'FEATURE_AUTO_REFRESH_STREAM',
  FEATURE_WEB_UPGRADE_FLOW: 'FEATURE_WEB_UPGRADE_FLOW'
]

android {
  defaultConfig {
    buildConfigField BOOLEAN, flags['FEATURE_SOUNDCLOUD_GO'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_NEW_NOTIFICATION_SETTINGS'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_AUTO_REFRESH_STREAM'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_WEB_UPGRADE_FLOW'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_SERVE_DEMO_VIDEO_AD'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_PAYMENTS_TEST'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_STATIONS_HOME'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_PUBLISH_PLAY_EVENTS_TO_TPUB'], TRUE
    buildConfigField BOOLEAN, flags['FEATURE_DISCOVERY_CHARTS'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_DISCOVERY_RECOMMENDATIONS'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_VIDEO_ADS'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_WAVEFORM_SPRING'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_PROFILE_NEW_TABS'], FALSE
    buildConfigField BOOLEAN, flags['FEATURE_EXPLODE_PLAYLISTS_IN_PLAYQUEUES'], FALSE
  }

  buildTypes {
    alpha {
      buildConfigField BOOLEAN, flags['FEATURE_SOUNDCLOUD_GO'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_NEW_NOTIFICATION_SETTINGS'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_AUTO_REFRESH_STREAM'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_WEB_UPGRADE_FLOW'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_SERVE_DEMO_VIDEO_AD'], TRUE // Does nothing unless FEATURE_VIDEO_ADS is enabled
    }

    beta {
      buildConfigField BOOLEAN, flags['FEATURE_PUBLISH_PLAY_EVENTS_TO_TPUB'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_WEB_UPGRADE_FLOW'], TRUE
    }

    debug {
      buildConfigField BOOLEAN, flags['FEATURE_STATIONS_HOME'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_SOUNDCLOUD_GO'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_WEB_UPGRADE_FLOW'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_NEW_NOTIFICATION_SETTINGS'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_AUTO_REFRESH_STREAM'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_SERVE_DEMO_VIDEO_AD'], TRUE // Does nothing unless FEATURE_VIDEO_ADS is enabled
      buildConfigField BOOLEAN, flags['FEATURE_PUBLISH_PLAY_EVENTS_TO_TPUB'], TRUE
    }

    end2end {
      buildConfigField BOOLEAN, flags['FEATURE_PAYMENTS_TEST'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_WEB_UPGRADE_FLOW'], TRUE
    }

    release {
      buildConfigField BOOLEAN, flags['FEATURE_WEB_UPGRADE_FLOW'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_PUBLISH_PLAY_EVENTS_TO_TPUB'], TRUE
    }

    releaseNoProguard {
      buildConfigField BOOLEAN, flags['FEATURE_WEB_UPGRADE_FLOW'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_PUBLISH_PLAY_EVENTS_TO_TPUB'], TRUE
    }

    release_non_play_store {
      buildConfigField BOOLEAN, flags['FEATURE_WEB_UPGRADE_FLOW'], TRUE
      buildConfigField BOOLEAN, flags['FEATURE_PUBLISH_PLAY_EVENTS_TO_TPUB'], TRUE
    }
  }
}

////Excluded build types
//def excludedBuildTypes = ['repack']
//
////Checks whether all feature flags start with 'FEATURE'
//task checkFlags (dependsOn: ':app:preBuild') {
//  flags.each {
//    if (!it.key.startsWith(FEATURE))
//      failBuild('Feature flag defined without FEATURE prefix.')
//  }
//}
//
////Checks whether the number of flags is consistent within each build variant
//android.buildTypes.all { buildType ->
//  if (!excludedBuildTypes.contains(buildType.name)) {
//    def featureFlagsForBuildType = []
//    buildType.getBuildConfigFields().each {
//      if (it.key.startsWith(FEATURE))
//        featureFlagsForBuildType.add it.key
//    }
//    if (featureFlagsForBuildType.size != flags.keySet().toList().size)
//      failBuild("Inconsistent number of flags for build type: ${buildType.name}")
//  }
//}
//
//android {
//  tasks.whenTaskAdded { currentTask ->
//    project.('android').buildTypes.all { build ->
//      def buildName = build.name
//      def generateBuildConfigTask = "generate${buildName.capitalize()}BuildConfig".toString()
//      if (generateBuildConfigTask.equals(currentTask.name.toString())) {
//
//      }
//    }
//  }
//}
//
//def failBuild(message) {
//    throw new GradleException(message)
//}

