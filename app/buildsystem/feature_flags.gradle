apply plugin: 'com.android.application'

def BOOLEAN = "boolean"
def TRUE = "true"
def FALSE = "false"

enum Feature {
  SOUNDCLOUD_GO,
  NEW_NOTIFICATION_SETTINGS,
  AUTO_REFRESH_STREAM,
  WEB_UPGRADE_FLOW,
  STATIONS_HOME,
  PUBLISH_PLAY_EVENTS_TO_TPUB,
  DISCOVERY_CHARTS,
  DISCOVERY_RECOMMENDATIONS,
  VIDEO_ADS,
  PROFILE_NEW_TABS,
  EXPLODE_PLAYLISTS_IN_PLAYQUEUES;
}

android {
  defaultConfig {
    buildConfigField BOOLEAN, Feature.SOUNDCLOUD_GO.name(), FALSE
    buildConfigField BOOLEAN, Feature.NEW_NOTIFICATION_SETTINGS.name(), FALSE
    buildConfigField BOOLEAN, Feature.AUTO_REFRESH_STREAM.name(), FALSE
    buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), FALSE
    buildConfigField BOOLEAN, Feature.STATIONS_HOME.name(), FALSE
    buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), FALSE
    buildConfigField BOOLEAN, Feature.DISCOVERY_CHARTS.name(), FALSE
    buildConfigField BOOLEAN, Feature.DISCOVERY_RECOMMENDATIONS.name(), FALSE
    buildConfigField BOOLEAN, Feature.VIDEO_ADS.name(), FALSE
    buildConfigField BOOLEAN, Feature.PROFILE_NEW_TABS.name(), FALSE
    buildConfigField BOOLEAN, Feature.EXPLODE_PLAYLISTS_IN_PLAYQUEUES.name(), FALSE
  }

  buildTypes {
    alpha {
      buildConfigField BOOLEAN, Feature.NEW_NOTIFICATION_SETTINGS.name(), TRUE
      buildConfigField BOOLEAN, Feature.AUTO_REFRESH_STREAM.name(), TRUE
      buildConfigField BOOLEAN, Feature.SOUNDCLOUD_GO.name(), TRUE
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.VIDEO_ADS.name(), TRUE
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
      buildConfigField BOOLEAN, Feature.EXPLODE_PLAYLISTS_IN_PLAYQUEUES.name(), TRUE
    }

    beta {
      buildConfigField BOOLEAN, Feature.SOUNDCLOUD_GO.name(), TRUE
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
      buildConfigField BOOLEAN, Feature.EXPLODE_PLAYLISTS_IN_PLAYQUEUES.name(), TRUE
    }

    debug {
      buildConfigField BOOLEAN, Feature.STATIONS_HOME.name(), TRUE
      buildConfigField BOOLEAN, Feature.NEW_NOTIFICATION_SETTINGS.name(), TRUE
      buildConfigField BOOLEAN, Feature.AUTO_REFRESH_STREAM.name(), TRUE
      buildConfigField BOOLEAN, Feature.SOUNDCLOUD_GO.name(), TRUE
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.VIDEO_ADS.name(), TRUE
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
      buildConfigField BOOLEAN, Feature.EXPLODE_PLAYLISTS_IN_PLAYQUEUES.name(), TRUE
    }

    release {
      buildConfigField BOOLEAN, Feature.SOUNDCLOUD_GO.name(), TRUE
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
      buildConfigField BOOLEAN, Feature.EXPLODE_PLAYLISTS_IN_PLAYQUEUES.name(), TRUE
    }

    releaseNoProguard {
      buildConfigField BOOLEAN, Feature.SOUNDCLOUD_GO.name(), TRUE
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
      buildConfigField BOOLEAN, Feature.EXPLODE_PLAYLISTS_IN_PLAYQUEUES.name(), TRUE
    }

    releaseNonPlayStore {
      buildConfigField BOOLEAN, Feature.SOUNDCLOUD_GO.name(), TRUE
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
      buildConfigField BOOLEAN, Feature.EXPLODE_PLAYLISTS_IN_PLAYQUEUES.name(), TRUE
    }
  }
}

//Excluded unrelated stuff
def excludedBuildTypes = ['repack']
def excludeConfigFields = ['RUN_ADS_TEST']

task checkFlags (dependsOn: ':app:preBuild') {
  def defaultFeatureFlags = android.defaultConfig.getBuildConfigFields()
  //Checks that the number of flags defined in the enum is consistent
  //with the number of flags defined in the default section.
  if (defaultFeatureFlags.keySet().size() != Feature.values().size())
      failBuild("Inconsistent number of flags between defaultConfig section and Feature enum.")
  //Make sure that all flags in default config section are disabled.
  defaultFeatureFlags.each {
    if (it.getValue().getValue() == TRUE) {
      failBuild("Flag ${it.key} has a TRUE value in defaultConfig. All values by default should be FALSE. " +
              "Please override the Flag ${it.key} value in the build type you are interested in.")
    }
  }
}

//Checks whether all flags in each build are TRUE otherwise fails
//the build asking to remove it since the default value is FALSE.
android.buildTypes.all { buildType ->
  if (!excludedBuildTypes.contains(buildType.name)) {
    buildType.getBuildConfigFields().each {
      if (!excludeConfigFields.contains(it.key))
        if (it.getValue().getValue() == FALSE) {
          failBuild("Flag ${it.key} has a FALSE value in build type: ${buildType.name}. " +
                  "Please remove it or turn its value to TRUE.")
        }
    }
  }
}

def failBuild(message) {
    throw new GradleException(message)
}

