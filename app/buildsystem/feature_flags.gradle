apply plugin: 'com.android.application'

def BOOLEAN = "boolean"
def TRUE = "true"
def FALSE = "false"

enum Feature {
  SOUNDCLOUD_GO,
  NEW_NOTIFICATION_SETTINGS,
  AUTO_REFRESH_STREAM,
  WEB_UPGRADE_FLOW,
  SERVE_DEMO_VIDEO_AD,
  PAYMENTS_TEST,
  STATIONS_HOME,
  PUBLISH_PLAY_EVENTS_TO_TPUB,
  DISCOVERY_CHARTS,
  DISCOVERY_RECOMMENDATIONS,
  VIDEO_ADS,
  WAVEFORM_SPRING,
  PROFILE_NEW_TABS,
  EXPLODE_PLAYLISTS_IN_PLAYQUEUES;
}

android {
  defaultConfig {
    buildConfigField BOOLEAN, Feature.SOUNDCLOUD_GO.name(), FALSE
    buildConfigField BOOLEAN, Feature.NEW_NOTIFICATION_SETTINGS.name(), FALSE
    buildConfigField BOOLEAN, Feature.AUTO_REFRESH_STREAM.name(), FALSE
    buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), FALSE
    buildConfigField BOOLEAN, Feature.SERVE_DEMO_VIDEO_AD.name(), FALSE
    buildConfigField BOOLEAN, Feature.PAYMENTS_TEST.name(), FALSE
    buildConfigField BOOLEAN, Feature.STATIONS_HOME.name(), FALSE
    buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
    buildConfigField BOOLEAN, Feature.DISCOVERY_CHARTS.name(), FALSE
    buildConfigField BOOLEAN, Feature.DISCOVERY_RECOMMENDATIONS.name(), FALSE
    buildConfigField BOOLEAN, Feature.VIDEO_ADS.name(), FALSE
    buildConfigField BOOLEAN, Feature.WAVEFORM_SPRING.name(), FALSE
    buildConfigField BOOLEAN, Feature.PROFILE_NEW_TABS.name(), FALSE
    buildConfigField BOOLEAN, Feature.EXPLODE_PLAYLISTS_IN_PLAYQUEUES.name(), FALSE
  }

  buildTypes {
    alpha {
      buildConfigField BOOLEAN, Feature.SOUNDCLOUD_GO.name(), TRUE
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.NEW_NOTIFICATION_SETTINGS.name(), TRUE
      buildConfigField BOOLEAN, Feature.AUTO_REFRESH_STREAM.name(), TRUE
      buildConfigField BOOLEAN, Feature.SERVE_DEMO_VIDEO_AD.name(), TRUE // Does nothing unless FEATURE_VIDEO_ADS is enabled
    }

    beta {
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
    }

    debug {
      buildConfigField BOOLEAN, Feature.STATIONS_HOME.name(), TRUE
      buildConfigField BOOLEAN, Feature.SOUNDCLOUD_GO.name(), TRUE
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.NEW_NOTIFICATION_SETTINGS.name(), TRUE
      buildConfigField BOOLEAN, Feature.AUTO_REFRESH_STREAM.name(), TRUE
      buildConfigField BOOLEAN, Feature.SERVE_DEMO_VIDEO_AD.name(), TRUE // Does nothing unless FEATURE_VIDEO_ADS is enabled
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
    }

    end2end {
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.PAYMENTS_TEST.name(), TRUE
    }

    release {
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
    }

    releaseNoProguard {
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
    }

    release_non_play_store {
      buildConfigField BOOLEAN, Feature.WEB_UPGRADE_FLOW.name(), TRUE
      buildConfigField BOOLEAN, Feature.PUBLISH_PLAY_EVENTS_TO_TPUB.name(), TRUE
    }
  }
}

////Excluded build types
//def excludedBuildTypes = ['repack']
//
////Checks whether all feature flags start with 'FEATURE'
//task checkFlags (dependsOn: ':app:preBuild') {
//  flags.each {
//    if (!it.key.startsWith(FEATURE))
//      failBuild('Feature flag defined without FEATURE prefix.')
//  }
//}
//
////Checks whether the number of flags is consistent within each build variant
//android.buildTypes.all { buildType ->
//  if (!excludedBuildTypes.contains(buildType.name)) {
//    def featureFlagsForBuildType = []
//    buildType.getBuildConfigFields().each {
//      if (it.key.startsWith(FEATURE))
//        featureFlagsForBuildType.add it.key
//    }
//    if (featureFlagsForBuildType.size != flags.keySet().toList().size)
//      failBuild("Inconsistent number of flags for build type: ${buildType.name}")
//  }
//}
//
//android {
//  tasks.whenTaskAdded { currentTask ->
//    project.('android').buildTypes.all { build ->
//      def buildName = build.name
//      def generateBuildConfigTask = "generate${buildName.capitalize()}BuildConfig".toString()
//      if (generateBuildConfigTask.equals(currentTask.name.toString())) {
//
//      }
//    }
//  }
//}
//
//def failBuild(message) {
//    throw new GradleException(message)
//}

