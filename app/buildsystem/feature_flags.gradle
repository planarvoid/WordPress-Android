apply plugin: 'com.android.application'

def FLAG = "String"

//Flag values
def DEFAULT_SHOW = "\"DEFAULT_SHOW\""
def DEFAULT_HIDE = "\"DEFAULT_HIDE\""
def UNDER_DEVELOPMENT = "\"UNDER_DEVELOPMENT\""

enum Feature {
  DISCOVER_BACKEND,
  HOLISTIC_TRACKING,
  SUGGESTED_CREATORS,
  FORCE_SUGGESTED_CREATORS_FOR_ALL,
  NEW_HOME,
  NEW_FOR_YOU_FIRST,
  NEW_FOR_YOU_SECOND,
  OTHER_PLAYLISTS_BY_CREATOR,
  PROFILE_BANNER,
  SEARCH_TOP_RESULTS,
  FLIPPER,
  ENCRYPTED_HLS,
  PRESTITIAL,
  WELCOME_USER,
  OFFLINE_PROPERTIES_PROVIDER,
  FORCE_SHOW_WELCOME_USER,
  SEARCH_PLAY_RELATED_TRACKS,
  RECOMMENDED_PLAYLISTS,
  DYNAMIC_LINK_SHARING,
  FIREBASE_PERFORMANCE_MONITORING;
}

android {
  defaultConfig {
    buildConfigField FLAG, Feature.DISCOVER_BACKEND.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.HOLISTIC_TRACKING.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.SUGGESTED_CREATORS.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.FORCE_SUGGESTED_CREATORS_FOR_ALL.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.NEW_HOME.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.NEW_FOR_YOU_FIRST.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.NEW_FOR_YOU_SECOND.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.OTHER_PLAYLISTS_BY_CREATOR.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.PROFILE_BANNER.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.SEARCH_TOP_RESULTS.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.FLIPPER.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.ENCRYPTED_HLS.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.PRESTITIAL.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.WELCOME_USER.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.FORCE_SHOW_WELCOME_USER.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.OFFLINE_PROPERTIES_PROVIDER.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.SEARCH_PLAY_RELATED_TRACKS.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.RECOMMENDED_PLAYLISTS.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.DYNAMIC_LINK_SHARING.name(), UNDER_DEVELOPMENT
    buildConfigField FLAG, Feature.FIREBASE_PERFORMANCE_MONITORING.name(), UNDER_DEVELOPMENT
  }

  buildTypes {
    debug {
      buildConfigField FLAG, Feature.OTHER_PLAYLISTS_BY_CREATOR.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.SEARCH_TOP_RESULTS.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.WELCOME_USER.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.FORCE_SHOW_WELCOME_USER.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.FLIPPER.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.NEW_FOR_YOU_FIRST.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.NEW_FOR_YOU_SECOND.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.SEARCH_PLAY_RELATED_TRACKS.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.OFFLINE_PROPERTIES_PROVIDER.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.RECOMMENDED_PLAYLISTS.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.DYNAMIC_LINK_SHARING.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.ENCRYPTED_HLS.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.FIREBASE_PERFORMANCE_MONITORING.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.PRESTITIAL.name(), DEFAULT_SHOW
    }

    alpha {
      buildConfigField FLAG, Feature.HOLISTIC_TRACKING.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.SUGGESTED_CREATORS.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.OTHER_PLAYLISTS_BY_CREATOR.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.FORCE_SUGGESTED_CREATORS_FOR_ALL.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.FLIPPER.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.SEARCH_TOP_RESULTS.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.PROFILE_BANNER.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.WELCOME_USER.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.NEW_FOR_YOU_FIRST.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.NEW_FOR_YOU_SECOND.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.FORCE_SHOW_WELCOME_USER.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.SEARCH_PLAY_RELATED_TRACKS.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.OFFLINE_PROPERTIES_PROVIDER.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.RECOMMENDED_PLAYLISTS.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.DYNAMIC_LINK_SHARING.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.ENCRYPTED_HLS.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.FIREBASE_PERFORMANCE_MONITORING.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.PRESTITIAL.name(), DEFAULT_SHOW
    }

    beta {
      buildConfigField FLAG, Feature.HOLISTIC_TRACKING.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.SEARCH_TOP_RESULTS.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.OTHER_PLAYLISTS_BY_CREATOR.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.NEW_FOR_YOU_FIRST.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.NEW_FOR_YOU_SECOND.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.SEARCH_PLAY_RELATED_TRACKS.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.RECOMMENDED_PLAYLISTS.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.DYNAMIC_LINK_SHARING.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.OFFLINE_PROPERTIES_PROVIDER.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.FLIPPER.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.FIREBASE_PERFORMANCE_MONITORING.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.PRESTITIAL.name(), DEFAULT_SHOW
    }

    release {
      buildConfigField FLAG, Feature.NEW_FOR_YOU_FIRST.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.NEW_FOR_YOU_SECOND.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.SEARCH_PLAY_RELATED_TRACKS.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.RECOMMENDED_PLAYLISTS.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.DYNAMIC_LINK_SHARING.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.OTHER_PLAYLISTS_BY_CREATOR.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.OFFLINE_PROPERTIES_PROVIDER.name(), DEFAULT_SHOW
      buildConfigField FLAG, Feature.FLIPPER.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.FIREBASE_PERFORMANCE_MONITORING.name(), DEFAULT_HIDE
      buildConfigField FLAG, Feature.PRESTITIAL.name(), DEFAULT_SHOW
    }
  }
}

//Excluded unrelated stuff
def excludeConfigFields = ['RUN_ADS_TEST']

task checkFlags(dependsOn: ':app:preBuild') {
  def defaultFeatureFlags = android.defaultConfig.getBuildConfigFields()
  //Checks that the number of flags defined in the enum is consistent
  //with the number of flags defined in the default section.
  if (defaultFeatureFlags.keySet().size() != Feature.values().size())
    failBuild("Inconsistent number of flags between defaultConfig section and Feature enum.")
  //Make sure that all flags in default config section are UNDER_DEVELOPMENT.
  defaultFeatureFlags.each {
    def flagValue = it.getValue().getValue()
    if (flagValue == DEFAULT_SHOW || flagValue == DEFAULT_HIDE) {
      failBuild("Flag ${it.key} has a DEFAULT_SHOW or DEFAULT_HIDE value in defaultConfig. " +
              "All values by default should be UNDER_DEVELOPMENT. " +
              "Please override the Flag ${it.key} value in the build type you are interested in.")
    }
  }
}

//Checks whether all flags in each build are DEFAULT_SHOW or DEFAULT_HIDE otherwise fails
//the build asking to remove it since the default should be UNDER_DEVELOPMENT.
android.buildTypes.all { buildType ->
  buildType.getBuildConfigFields().each {
    if (!excludeConfigFields.contains(it.key))
      if (it.getValue().getValue() == UNDER_DEVELOPMENT) {
        failBuild("Flag ${it.key} has a UNDER_DEVELOPMENT value in build type: ${buildType.name}. " +
                "Please remove it or turn its value to DEFAULT_SHOW or DEFAULT_HIDE.")
      }
  }
}

// This will copy over all buildConfigFields that handle feature flags from
// release to preRelease and releaseNonPlayStore
android.buildTypes.release { buildType ->
  // Read all buildConfigFields and only take those that contain keys from the Feature Flag enum
  def buildConfigFields = buildType.getBuildConfigFields().subMap(Feature.values()*.name())

  android.buildTypes.preRelease.addBuildConfigFields(buildConfigFields)
  android.buildTypes.releaseNonPlayStore.addBuildConfigFields(buildConfigFields)
}

def failBuild(message) {
  throw new GradleException(message)
}
