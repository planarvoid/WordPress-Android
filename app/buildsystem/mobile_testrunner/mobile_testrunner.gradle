import com.soundcloud.mobiletestrunner.client.TestRunnerFactory
import com.soundcloud.mobiletestrunner.client.TestStatusNotifier
import com.soundcloud.mobiletestrunner.client.model.*

buildscript {
  repositories {
    mavenLocal()
    maven { url 'http://maven.int.s-cloud.net/content/groups/soundcloud-proxy' }
  }
  dependencies {
    classpath 'com.soundcloud.mobiletestrunner:client:128-27-1b344d2'
  }
}

apply from: "${project.('buildSrcDir')}/apk_finder.gradle"
apply from: "${project.('buildSrcDir')}/curl.gradle"

def systemProperties = [
        //"log.tag.Propeller": "DEBUG", -- too noisy
        "log.tag.ApiClient"            : "DEBUG",
        "log.tag.PublicApi"            : "DEBUG",
        "log.tag.ApiSyncer"            : "DEBUG",
        "log.tag.Timeline"             : "DEBUG",
        "log.tag.SC_ANDROID_TEST"      : "DEBUG",
        "log.tag.BUG_4503"             : "DEBUG",
        "log.tag.EventTrackingManager" : "DEBUG",
        "log.tag.MrLoggaVerifier"      : "DEBUG",
        "log.tag.Configuration"        : "DEBUG",
        "log.tag.TestRunner"           : "DEBUG",
        "log.tag.PlaybackService"      : "DEBUG",
        "log.tag.ScAds"                : "DEBUG",
        "log.tag.SoundCloudApplication": "DEBUG",
        "log.tag.OfflineTests"         : "DEBUG",
        "log.tag.ActivityLifeCycle"    : "DEBUG"
]
def lollipopLabel = new Label("Lollipop")

task runListOfTests << {
  def tests = [
          new Test("com.soundcloud.android.tests.stream.StreamTest", "testPlayAndPauseTrackFromStream"),
  ] as Test[]

  runTests(lollipopLabel, null, systemProperties, null, tests)
}

task runTestClass << {
  def classFilter = "com.soundcloud.android.tests.stream.StreamTest"

  runTests(lollipopLabel, null, systemProperties, classFilter, null)
}

task runLollipopTests << {
  def excludeAnnotations = [
          "com.soundcloud.android.framework.annotation.Ignore",
          "com.soundcloud.android.framework.annotation.CollectionsTest",
          "com.soundcloud.android.framework.annotation.BlockedTrackTest",
          "com.soundcloud.android.framework.annotation.GoogleAccountTest",
          "com.soundcloud.android.framework.annotation.PaymentTest",
          "com.soundcloud.android.framework.annotation.LegacyStationTest",
          "com.soundcloud.android.framework.annotation.ReleaseOnly"
  ] as String[]

  runTests(lollipopLabel, excludeAnnotations, systemProperties, null, null)
}

task runLollipopTestsRelease << {
  def excludeAnnotations = [
          "com.soundcloud.android.framework.annotation.Ignore",
          "com.soundcloud.android.framework.annotation.AdsTest",
          "com.soundcloud.android.framework.annotation.BlockedTrackTest",
          "com.soundcloud.android.framework.annotation.CollectionsTest",
          "com.soundcloud.android.framework.annotation.GoogleAccountTest",
          "com.soundcloud.android.framework.annotation.StationsTabTest",
          "com.soundcloud.android.framework.annotation.PaymentTest",
          "com.soundcloud.android.framework.annotation.LegacyStationTest",
          "com.soundcloud.android.framework.annotation.PlayQueue"

  ] as String[]

  runTests(lollipopLabel, excludeAnnotations, systemProperties, null, null)
}

def runTests(label, excludeAnnotations, systemProperties, classFilter, Test[] tests) {
  def factory = new TestRunnerFactory()
  def listener = new TestResultListener(project, new LogHandler(project, executeGet), new CollectionTaskResultPrinter(project),
          new TestResultPrinter(project), new HTMLReportBuilder(project))

  def testRunner = factory.create(project.ext.mobileTestRunnerUrl, project.ext.mobileTestRunnerUser,
          project.ext.mobileTestRunnerHost, listener)
  testRunner.run(createExecution(label, excludeAnnotations, systemProperties, classFilter, tests))
}

def createSession(systemProperties) {
  def applicationPackage = new Package(project.('applicationId'), findApkPath(project.('buildType'), project.('alphaVersionCode')))
  def testPackage = new Package(project.('testApplicationId'), project.('testApkPath'))
  def toolsPackages = [new Package(project.('androidNetworkManagerApplicationId'), project.('networkManagerApkPath'))] as Package[]
  return new Session(applicationPackage, testPackage, toolsPackages, systemProperties)
}

def createRunConfiguration(label, excludeAnnotations, classFilter, Test[] tests) {
  return new RunConfiguration(label, project.ext.testInstrumentationRunner, project.ext.maxTestAttempts, false,
          project.ext.maxCollectionTaskAttempts, null, excludeAnnotations, classFilter, null, tests)
}

def createExecution(label, excludeAnnotations, systemProperties, classFilter, Test[] tests) {
  def session = createSession(systemProperties)
  def runConfiguration = createRunConfiguration(label, excludeAnnotations, classFilter, tests)

  return new Execution(session, runConfiguration)
}

class LogHandler {
  private final Project project
  private final Closure curlGet;

  public LogHandler(Project project, Closure curlGet) {
    this.project = project
    this.curlGet = curlGet
  }

  def copyLogs(runId) {
    def baseDirectory = new File(project.rootDir, "results")
    def xmlDirectory = new File(baseDirectory, "xml")
    xmlDirectory.mkdirs()
    def logfiles = executeQueryForLogFiles(runId)
    for (def logfile : logfiles) {
      copyLogFileFromServer(logfile, xmlDirectory.absolutePath)
    }
  }

  private def executeQueryForLogFiles(runId) {
    def url = "$project.ext.mobileTestRunnerUrl/results/$runId/xml_report_files"
    curlGet(url, [])
  }

  private def copyLogFileFromServer(remote_file_path, local_directory) {
    def local_filepath = "$local_directory/${UUID.randomUUID()}.xml"
    def cmd = ['curl', '-o', local_filepath, "$remote_file_path"]
    def p = cmd.execute()
    p.waitFor()
    def exitValue = p.exitValue()
    if (exitValue != 0) {
      throw new Exception("copyFromServer failed: ($cmd) exitValue: $exitValue")
    }
  }
}

class CollectionTaskResultPrinter {
  private final Project project

  def CollectionTaskResultPrinter(Project project) {
    this.project = project
  }

  def print(CollectionTaskResult collectionTaskResult) {
    def red = "\u001B[31m"
    def green = "\u001B[32m"
    def magenta = "\u001B[35m"
    def reset = "\u001B[0m"
    def color = green
    def resultText = "COLLECTION TASK PASSED"
    if (!collectionTaskResult.getResult()) {
      if (collectionTaskResult.getCollectionTask().getRetries() < project.ext.maxCollectionTaskAttempts - 1) {
        color = magenta
        resultText = "COLLECTION TASK FAILED... WILL RETRY"
      } else {
        color = red
        resultText = "COLLECTION TASK FAILED"
      }
    }

    println "$color$resultText: ${collectionTaskResult.getCollectionTask().getTestRunnerArguments()} $reset"
    if (!collectionTaskResult.getResult()) {
      println()
      collectionTaskResult.getDescription().split("\n").each { println "$color \t$it $reset" }
    }
  }
}

class TestResultPrinter {
  private final Project project

  def TestResultPrinter(Project project) {
    this.project = project
  }

  def print(TestResult testResult) {
    def red = "\u001B[31m"
    def green = "\u001B[32m"
    def magenta = "\u001B[35m"
    def reset = "\u001B[0m"
    def color = green
    def resultText = "TEST PASSED"
    if (!testResult.getResult()) {
      if (testResult.getTest().getRetries() < project.ext.maxTestAttempts - 1) {
        color = magenta
        resultText = "TEST FAILED... WILL RETRY"
      } else {
        color = red
        resultText = "TEST FAILED"
      }
    }

    println "$color$resultText: ${testResult.getTest().getClassName()}.${testResult.getTest().getTestName()} $reset"
    if (!testResult.getResult()) {
      println()
      testResult.getDescription().split("\n").each { println "$color \t$it $reset" }
    }
  }
}

class HTMLReportBuilder {
  private final Project project

  def HTMLReportBuilder(Project project) {
    this.project = project
  }

  def createReport(redirectTemplate, identifierMap, fileName) {
    def html_template = new File(project.projectDir, redirectTemplate).text
    def engine = new groovy.text.SimpleTemplateEngine()
    def template = engine.createTemplate(html_template).make(identifierMap)
    def dir = new File(project.rootDir, "results")
    dir.mkdirs()
    def report = new File(dir.absolutePath, fileName)
    report.newWriter().withWriter { w ->
      w << template.toString()
    }
  }
}

class TestResultListener extends TestStatusNotifier {
  private final Project project
  private final LogHandler logHandler
  private final CollectionTaskResultPrinter collectionTaskResultPrinter
  private final TestResultPrinter testResultPrinter
  private final HTMLReportBuilder htmlReportBuilder
  private UUID collectionRunIdentifier
  private UUID runIdentifier
  private int numFailedCollectionTasks = 0
  private int numFailedTests = 0

  public TestResultListener(Project project, LogHandler logHandler, CollectionTaskResultPrinter collectionTaskResultPrinter,
                            TestResultPrinter testResultPrinter, HTMLReportBuilder htmlReportBuilder) {
    super(project.mobileTestRunnerReportUrl)
    this.project = project
    this.logHandler = logHandler
    this.collectionTaskResultPrinter = collectionTaskResultPrinter
    this.testResultPrinter = testResultPrinter
    this.htmlReportBuilder = htmlReportBuilder
  }

  @Override
  void collectionRunFinished(CollectionRun collectionRun) {
    super.collectionRunFinished(collectionRun)
    if (collectionRunIdentifier != null) {
      htmlReportBuilder.createReport("buildsystem/mobile_testrunner/html_collection_report_redirect_template.html",
              ["collectionRunIdentifier": collectionRunIdentifier], "collection_index.html")
    }

    if (numFailedCollectionTasks > 0) {
      throw new GradleException("FAILED: " + numFailedCollectionTasks + " collection task(s) failed")
    }
  }

  @Override
  void runFinished(Run run) {
    super.runFinished(run);
    if (runIdentifier != null) {
      htmlReportBuilder.createReport("buildsystem/mobile_testrunner/html_report_redirect_template.html",
              ["runIdentifier": runIdentifier], "index.html")
      logHandler.copyLogs(runIdentifier)
    }

    if (numFailedTests > 0) {
      throw new GradleException("FAILED: " + numFailedTests + " test(s) failed")
    }
  }

  @Override
  void runFailed(String message) {
    throw new GradleException("FAILED: " + message)
  }

  @Override
  void testSuiteStarted(String s) {}

  @Override
  void testSuiteFinished(String s) {}

  @Override
  void testFinished(com.soundcloud.mobiletestrunner.client.model.TestResult testResult) {
    this.runIdentifier = testResult.run.id
    if (!testResult.getResult() && testResult.getTest().getRetries() >= project.ext.maxTestAttempts - 1) {
      numFailedTests += 1
    }
    testResultPrinter.print(testResult)
  }

  @Override
  void testStarted(com.soundcloud.mobiletestrunner.client.model.Test test) {}

  @Override
  void collectionTaskStarted(com.soundcloud.mobiletestrunner.client.model.CollectionTask collectionTask) {}

  @Override
  void collectionTaskFinished(com.soundcloud.mobiletestrunner.client.model.CollectionTaskResult collectionTaskResult) {
    this.collectionRunIdentifier = collectionTaskResult.collectionRun.id
    if (!collectionTaskResult.getResult() && collectionTaskResult.getCollectionTask().getRetries() >= project.ext.maxCollectionTaskAttempts - 1) {
      numFailedCollectionTasks += 1
    }
    collectionTaskResultPrinter.print(collectionTaskResult)
  }

  @Override
  void printMessage(String message) {
    println message
  }
}
