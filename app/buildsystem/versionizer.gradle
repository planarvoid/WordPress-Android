import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
  // Modify the name of the .apk file for each build type
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def currentDate = new Date().format('yy.MM.dd')
      def newApkName = "soundcloud-android-${currentDate}-${variant.name}.apk"
      output.outputFile = new File("${project.buildDir}/outputs/apk/", newApkName)
    }
  }

  // Generate a task for each build in order to copy the adequate properties file.
  tasks.whenTaskAdded { currentTask ->
    project.('android').buildTypes.all { build ->
      def buildName = build.name
      def generateBuildConfigTask = "generate${buildName.capitalize()}BuildConfig".toString()
      if (generateBuildConfigTask.equals(currentTask.name.toString())) {
        def copyPropertiesFileTask = "copyPropertiesFile${buildName.capitalize()}"
        task(copyPropertiesFileTask) {
          description = "Copy SoundCloud properties file for ${buildName} version."
          def srcFile = "properties/app_properties_${buildName}.xml"
          def destDir = 'res/values/'
          inputs.file srcFile
          outputs.dir destDir
          doLast {
            copy {
              from(srcFile)
              into(destDir)
              rename { def fileName ->
                fileName.replace("_${buildName}", "")
              }
            }
          }
        }

        if (!buildName.equals("end2end")) {
          def copyTestPropertiesFileTask = "copyTestPropertiesFile${buildName.capitalize()}"
          task(copyTestPropertiesFileTask) {
            description = "Copy SoundCloud test properties file for ${buildName} version."
            def srcFile = "src/androidTest/properties/test_properties_${buildName}.xml"
            def destDir = 'src/androidTest/res/values/'
            inputs.file srcFile
            outputs.dir destDir
            doLast {
              copy {
                from(srcFile)
                into(destDir)
                rename { def fileName ->
                    fileName.replace("_${buildName}", "")
                }
              }
            }
          }
          currentTask.dependsOn(copyTestPropertiesFileTask)
        }
        currentTask.dependsOn(copyPropertiesFileTask)
      }
    }
  }

  task incrementVersionCode () {
    description = 'Increments version code in the AndroidManifest.xml file of the main app.'
    doLast {
      def manifestFile = file('AndroidManifest.xml')
      def manifestText = manifestFile.getText()
      def patternVersionCode = Pattern.compile('versionCode=\"(\\d+)\"')
      def matcherVersionCode = patternVersionCode.matcher(manifestText)
      matcherVersionCode.find()

      def versionCode = Integer.parseInt(matcherVersionCode.group(1))
      def manifestContent = matcherVersionCode.replaceAll('versionCode=\"' + ++versionCode + '\"')

      manifestFile.write(manifestContent)
    }
  }

  task incrementVersionName () {
    description = 'Increments version name in the AndroidManifest.xml file of the main app.'
    doLast {
      def manifestFile = file('AndroidManifest.xml')
      def manifestText = manifestFile.getText()
      def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
      def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
      matcherVersionNumber.find()

      def currentDate = new Date().format('yy.MM.dd')
      def year = currentDate.substring(0, 2)
      def month = currentDate.substring(3, 5)
      def day = currentDate.substring(6, 8)

      def mNextVersionName = "${year}.${month}.${day}"
      def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")

      manifestFile.write(manifestContent)
    }
  }
}
