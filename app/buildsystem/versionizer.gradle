import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
  // Modify the name of the .apk file for each build type
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def currentDate = new Date().format("yy.MM.dd")
      def newApkName = "soundcloud-android-${currentDate}-${variant.name}.apk"
      output.outputFile = new File("${project.buildDir}/outputs/apk/", newApkName)
    }
  }

  // Generate a task for each build in order to copy the adequate properties file.
  tasks.whenTaskAdded { currentTask ->
    project.('android').buildTypes.all { build ->
      def buildName = build.name
      def generateBuildConfigTask = "generate${buildName.capitalize()}BuildConfig".toString()
      if (generateBuildConfigTask.equals(currentTask.name.toString())) {
        def copyPropertiesFileTask = "copyPropertiesFile${buildName.capitalize()}"
        task(copyPropertiesFileTask) {
          description = "Copy SoundCloud properties file for ${buildName} version."
          def srcFile = "properties/app_properties_${buildName}.xml"
          def destDir = 'res/values/'
          inputs.file srcFile
          outputs.dir destDir
          doLast {
            copy {
              from(srcFile)
              into(destDir)
              rename { def fileName ->
                fileName.replace("_${buildName}", "")
              }
            }
          }
        }

        if (!buildName.equals("end2end")) {
          def copyTestPropertiesFileTask = "copyTestPropertiesFile${buildName.capitalize()}"
          task(copyTestPropertiesFileTask) {
            description = "Copy SoundCloud test properties file for ${buildName} version."
            def srcFile = "src/androidTest/properties/test_properties_${buildName}.xml"
            def destDir = 'src/androidTest/res/values/'
            inputs.file srcFile
            outputs.dir destDir
            doLast {
              copy {
                from(srcFile)
                into(destDir)
                rename { def fileName ->
                    fileName.replace("_${buildName}", "")
                }
              }
            }
          }
          currentTask.dependsOn(copyTestPropertiesFileTask)
        }
        currentTask.dependsOn(copyPropertiesFileTask)
      }
    }
  }

  task bumpVersion << {
    def manifestFile = file('AndroidManifest.xml')
    def manifestText = manifestFile.getText()
    def pattern = Pattern.compile('versionCode=\"(\\d+)\"')
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    def manifestContent = matcher.replaceAll('versionCode=\"' + ++versionCode + '\"')
    manifestFile.write(manifestContent)
  }
}
