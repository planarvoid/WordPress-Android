import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
  tasks.whenTaskAdded { currentTask ->
    // Generate a task for each build in order to copy the adequate properties file.
    project.('android').buildTypes.all { build ->
      def buildName = build.name
      def propertiesType
      // releaseNoProguard build should use the release build properties file
      if (buildName.equals('releaseNoProguard')) propertiesType = 'release'
      else propertiesType = buildName

      def generateBuildConfigTask = "generate${buildName.capitalize()}BuildConfig".toString()
      if (generateBuildConfigTask.equals(currentTask.name.toString())) {
        def copyPropertiesFileTask = "copyPropertiesFile${buildName.capitalize()}"
        task(copyPropertiesFileTask) {
          description = "Copy SoundCloud properties file for ${propertiesType} version."
          def srcFile = "properties/app_properties_${propertiesType}.xml"
          def destDir = 'res/values/'
          inputs.file srcFile
          outputs.dir destDir
          doLast {
            copy {
              from(srcFile)
              into(destDir)
              rename { def fileName ->
                fileName.replace("_${propertiesType}", "")
              }
            }
          }
        }

        def copyTestPropertiesFileTask = "copyTestPropertiesFile${buildName.capitalize()}"
        task(copyTestPropertiesFileTask) {
          description = "Copy SoundCloud test properties file for ${propertiesType} version."
          def srcFile = "src/androidTest/properties/test_properties_${propertiesType}.xml"
          def destDir = 'src/androidTest/res/values/'
          inputs.file srcFile
          outputs.dir destDir
          doLast {
            copy {
              from(srcFile)
              into(destDir)
              rename { def fileName ->
                  fileName.replace("_${propertiesType}", "")
              }
            }
          }
        }

        currentTask.dependsOn(copyTestPropertiesFileTask)
        currentTask.dependsOn(copyPropertiesFileTask)
      }
    }
  }
}

task incrementVersionCode {
  // Increments version code in the AndroidManifest.xml file of the main app
  doLast {
    def manifestFile = file(rootProject.ext.manifestSrcFile)
    def manifestText = manifestFile.getText()
    def patternVersionCode = Pattern.compile('versionCode=\"(\\d+)\"')
    def matcherVersionCode = patternVersionCode.matcher(manifestText)
    matcherVersionCode.find()

    def manifestContent = matcherVersionCode.replaceAll('versionCode=\"' + project.ext.versionCode + '\"')

    manifestFile.write(manifestContent)
  }
}

task setAlphaVersionCode {
  // Sets version code in the AndroidManifest.xml file of the main app to arbitrary value
  doLast {
    def manifestFile = file('AndroidManifest.xml')
    def matcherVersionCode = Pattern.compile('versionCode=\"(\\d+)\"').matcher( manifestFile.getText())
    matcherVersionCode.find()
    manifestFile.write(matcherVersionCode.replaceAll('versionCode=\"' + 1000 + '\"'))
  }
}

task incrementVersionName {
  // Increments version name in the AndroidManifest.xml file of the main app
  doLast {
    def manifestFile = file('AndroidManifest.xml')
    def manifestText = manifestFile.getText()
    def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    matcherVersionNumber.find()

    def manifestContent = matcherVersionNumber.replaceAll('versionName=\"' + project.ext.versionName + '\"')

    manifestFile.write(manifestContent)
  }
}
