import java.util.regex.Pattern

task versionizeDebug {
  doLast {
    // for testing HT, we need to versionize with the alphaVersionCode (1000) so all features are enabled
    versionize('debug', project.('alphaVersionCode'))
  }
}
versionizeDebug.mustRunAfter('clean')

task versionizeAlpha {
  doLast {
    updateVersionName()
    updateVersionCode(project.('alphaVersionCode'))
  }
}
versionizeAlpha.mustRunAfter('clean')

task versionizeBeta {
  doLast {
    versionize('beta', project.('betaVersionCode'))
  }
}
versionizeBeta.mustRunAfter('clean')

task versionizeFollowUpBeta {
  doLast {
    versionize('beta', project.('followUpBetaVersionCode'))
  }
}
versionizeFollowUpBeta.mustRunAfter('clean')

task versionizeRelease {
  doLast {
    versionize('release', project.('releaseVersionCode'))
  }
}
versionizeRelease.mustRunAfter('clean')

task versionizePreRelease {
  doLast {
    // for testing HT, we need to versionize with the alphaVersionCode (1000) so all features are enabled
    versionize('preRelease', project.('alphaVersionCode'))
  }
}
versionizePreRelease.mustRunAfter('clean')

// *********************************************************************************************************************
// HELPERS
// *********************************************************************************************************************

def versionize(buildType, versionCode) {
  updateVersionName()
  updateVersionCode(versionCode)
  renameApk(buildType, versionCode)
}

def updateVersionName() {
  def manifestFile = file(rootProject.('manifestSrcFile'))
  def manifestText = manifestFile.getText()
  def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
  def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
  matcherVersionNumber.find()

  def manifestContent = matcherVersionNumber.replaceAll('versionName=\"' + (String) project.('versionName') + '\"')

  manifestFile.write(manifestContent)
}

def updateVersionCode(versionCode) {
  // Sets the version code in the AndroidManifest.xml file of the main app
  def manifestFile = file(rootProject.('manifestSrcFile'))
  def manifestText = manifestFile.getText()
  def patternVersionCode = Pattern.compile('versionCode=\"(\\d+)\"')
  def matcherVersionCode = patternVersionCode.matcher(manifestText)
  matcherVersionCode.find()

  def manifestContent = matcherVersionCode.replaceAll('versionCode=\"' + versionCode + '\"')

  manifestFile.write(manifestContent)
}

def renameApk(buildType, versionCode) {
  def filename = "${project.('apkPath')}".replace(".apk", "-${buildType}-${versionCode}.apk")
  println filename
  project.('android').applicationVariants.all { variant ->
    variant.outputs.each { output ->
      output.outputFile = new File(filename)
    }
  }
}
