import groovy.json.JsonOutput

apply from: "${project.('buildSrcDir')}/apk_finder.gradle"
apply from: "${project.('buildSrcDir')}/curl.gradle"

task uploadGithubBeta {
  description = 'Creates a tag and release on Github for beta apk.'

  doLast {
    uploadGithub('beta', project.('betaVersionCode'))
  }
}

task uploadGithubFollowUpBeta {
  description = 'Creates a tag and release on Github for follow up beta apk.'

  doLast {
    uploadGithub('beta', project.('followUpBetaVersionCode'))
  }
}

task uploadGithubRelease {
  description = 'Creates a tag and release on Github for release apk.'

  doLast {
    uploadGithub('release', project.('releaseVersionCode'))
  }
}

def uploadGithub(String buildType, versionCode){
  def token = '0330604618ffbc5232a62f3e96f9d3b25377b9cb'
  def owner = 'soundcloud'
  def repo  = 'soundcloud-android'

  def releaseId = createRelease(buildType, versionCode, owner, repo, token)
  uploadApkToRelease(buildType, versionCode, owner, repo, token, releaseId)
}

class Release { String tag_name; String target_commitish; String name; String body }

def String createRelease(String buildType, versionCode, owner, repo, token) {
  def release = new Release(
          tag_name: findApkFilenameMinusExtension(buildType, versionCode),
          target_commitish: project.('gitBranch'),
          name: project.('releaseName'),
          body: project.('releaseBody')
  )
  def jsonRelease = JsonOutput.toJson(release)

  def url = "https://api.github.com/repos/$owner/$repo/releases?access_token=$token"

  def result = executePostWithData(url, jsonRelease, "")
  if (result == "") {
    throw new Exception("Unable to create github release")
  }
  return result.id
}

def uploadApkToRelease(String buildType, versionCode, owner, repo, token, releaseId) {
  def url = "https://uploads.github.com/repos/$owner/$repo/releases/$releaseId/assets?name=" +
          "soundcloud-android.apk&access_token=$token"
  def apkPath = findApkPath(buildType, versionCode)

  def result = executePostWithApk(url, apkPath, 0)
  if (result == 0) {
    throw new Exception("Unable to upload $buildType apk to github release")
  }
}
