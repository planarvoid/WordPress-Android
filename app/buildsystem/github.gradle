import groovy.json.JsonOutput

import java.text.SimpleDateFormat

apply from: "${project.('buildSrcDir')}/apk_finder.gradle"
apply from: "${project.('buildSrcDir')}/curl.gradle"

task uploadGithubBeta {
  description = 'Creates a tag and release on Github for beta apk.'

  doLast {
    uploadGitHubRelease('beta', project.('betaVersionCode'))
  }
}

task uploadGithubFollowUpBeta {
  description = 'Creates a tag and release on Github for follow up beta apk.'

  doLast {
    uploadGitHubRelease('beta', project.('followUpBetaVersionCode'))
  }
}

task uploadGithubRelease {
  description = 'Creates a tag and release on Github for release apk.'

  doLast {
    uploadGitHubRelease('release', project.('releaseVersionCode'))
  }
}

task openReleaseChecklist {
  description = 'Creates release checklist issue on GitHub.'

  doLast {
    openGitHubIssue(new Issue(
            title: "Release checklist " + currentDate(),
            body: rootProject.file('.release-checklist.md').text,
            labels: ['release']))
  }
}

task openRegressionTasks {
  description = 'Creates regression milestone and tasks on GitHub.'

  doLast {
    def number = openGitHubMilestone(new Milestone(title: 'Regression tasks ' + currentDate()))
    def input = rootProject.file('.regression-tests.md').text
    // Individual items in the template are delimited by 2 empty lines
    for (String ticket : input.split("\n\n\n")) {
      openGitHubIssue(new Issue(
              title: ticket.readLines()[0].replace('# ', ''),
              body: ticket.substring(ticket.indexOf('\n')).trim(),
              milestone: number,
              labels: []))
    }
  }
}

def uploadGitHubRelease(String buildType, versionCode){
  def releaseId = createRelease(buildType, versionCode)
  uploadApkToRelease(buildType, versionCode, releaseId)
}

def String createRelease(String buildType, versionCode) {
  def release = new Release(
          tag_name: findApkFilenameMinusExtension(buildType, versionCode),
          target_commitish: project.('gitBranch'),
          name: project.('releaseName'),
          body: project.('releaseBody')
  )
  def jsonRelease = JsonOutput.toJson(release)

  def result = executePostWithData(apiUrl('releases'), jsonRelease, '')
  if (result == '') {
    throw new Exception('Unable to create github release')
  }
  result.id
}

def uploadApkToRelease(String buildType, versionCode, releaseId) {
  def apkPath = findApkPath(buildType, versionCode)

  def result = executePostWithApk(uploadUrl(releaseId), apkPath, 0)
  if (result == 0) {
    throw new Exception('Unable to upload $buildType apk to github release')
  }
}

def openGitHubMilestone(Milestone milestone) {
  def response = executePostWithData(apiUrl('milestones'), JsonOutput.toJson(milestone), '')
  response.number
}

def openGitHubIssue(Issue issue) {
  executePostWithData(apiUrl('issues'), JsonOutput.toJson(issue), '')
}

static def currentDate() {
  new SimpleDateFormat('yyyy-MM-dd').format(new Date())
}

static def apiUrl(String path) {
  "https://api.github.com/repos/soundcloud/android-listeners/$path?access_token=0330604618ffbc5232a62f3e96f9d3b25377b9cb"
}

static def uploadUrl(String releaseId) {
  "https://uploads.github.com/repos/soundcloud/android-listeners/releases/$releaseId/assets?name=soundcloud-android.apk&access_token=0330604618ffbc5232a62f3e96f9d3b25377b9cb"
}

class Release { String tag_name; String target_commitish; String name; String body }
class Milestone { String title }
class Issue { String title; String body; String milestone; List<String> labels}

