import com.soundcloud.mobiletestrunner.client.groovy.TestRunner
import com.soundcloud.mobiletestrunner.client.model.*

buildscript {
  apply from: "$rootProject.projectDir/buildsystem/repositories.gradle", to: buildscript
  dependencies {
    classpath project.mobileTestRunner
  }
}

configurations {
  htmlTemplates
}

dependencies {
  htmlTemplates project.mobileTestRunner
}

task extractHtmlTemplates(type: Sync) {
  dependsOn configurations.htmlTemplates

  from { // use of closure defers evaluation until execution time
    configurations.htmlTemplates.collect { zipTree(it) }
  }
  include 'html*template.html'
  into "$project.projectDir/htmlTemplates/"
}

apply from: "${project.buildSrcDir}/apk_finder.gradle"

def applicationPackage() {
  new Package(project.applicationId, findApkPath(project.buildType, project.alphaVersionCode))
}

def testPackage() {
  new Package(project.testApplicationId, project.testApkPath)
}

def toolsPackages() {
  [] as Package[]
}

def testRunner() {
  new TestRunner(project.projectDir, project.rootDir, project.mobileTestRunnerUrl, project.mobileTestRunnerUser, project.mobileTestRunnerHost, project.mobileTestRunnerReportUrl,
          project.testInstrumentationRunner, project.mobileTestRunnerMaxTestAttempts, project.mobileTestRunnerScheduleAllTestAttemptsAtOnce, project.mobileTestRunnerMaxCollectionTaskAttempts,
          applicationPackage(), testPackage(), toolsPackages(), project.mobileTestRunnerSshPort as int)
}

static def systemPropertiesForBuildType(buildType) {
  def systemProperties = [
          //'log.tag.Propeller': 'DEBUG', -- too noisy
          'log.tag.ApiClient'            : 'DEBUG',
          'log.tag.PublicApi'            : 'DEBUG',
          'log.tag.ApiSyncer'            : 'DEBUG',
          'log.tag.Timeline'             : 'DEBUG',
          'log.tag.SC_ANDROID_TEST'      : 'DEBUG',
          'log.tag.EventTrackingManager' : 'DEBUG',
          'log.tag.Configuration'        : 'DEBUG',
          'log.tag.TestRunner'           : 'DEBUG',
          'log.tag.PlaybackService'      : 'DEBUG',
          'log.tag.ScAds'                : 'DEBUG',
          'log.tag.SoundCloudApplication': 'DEBUG',
          'log.tag.OfflineTests'         : 'DEBUG',
          'log.tag.ActivityLifeCycle'    : 'DEBUG',
          'buildType'                    : buildType
  ]

  if (System.env.containsKey('ghprbPullId')) {
    systemProperties.put("Pull Request ID",  System.env.ghprbPullId)
  }

  return systemProperties
}

def lollipopLabel = new Label('Lollipop')
def marshmallowLabel = new Label('Marshmallow')

def excludeAnnotations = [
        'com.soundcloud.android.framework.annotation.Ignore',
        'com.soundcloud.android.framework.annotation.GoogleAccountTest',
        'com.soundcloud.android.framework.annotation.PaymentTest'
] as String[]

def excludeAnnotationsRelease = [
        'com.soundcloud.android.framework.annotation.AdsTest',
        'com.soundcloud.android.framework.annotation.DuplicatedPageViews'
] as String[]
excludeAnnotationsRelease = excludeAnnotationsRelease + excludeAnnotations as String []

def onlyAdsTestsAnnotation = [
        'com.soundcloud.android.framework.annotation.AdsTest'
] as String[]

task runMarshmallowTestsMaster(dependsOn: extractHtmlTemplates) {
  doLast {
    def masterSystemProperties = systemPropertiesForBuildType('Android Listeners Master')

    testRunner().runTests(marshmallowLabel, null, excludeAnnotations, masterSystemProperties, null, null, null)
  }
}

task runMarshmallowTestsPr(dependsOn: extractHtmlTemplates) {
  doLast {
    def prSystemProperties = systemPropertiesForBuildType('Android Listeners PR')

    testRunner().runTests(marshmallowLabel, null, excludeAnnotations, prSystemProperties, null, null, null)
  }
}

task runMarshmallowTestsRelease(dependsOn: extractHtmlTemplates) {
  doLast {
    def releaseSystemProperties = systemPropertiesForBuildType('Android Listeners Release')
    
    testRunner().runTests(marshmallowLabel, null, excludeAnnotationsRelease, releaseSystemProperties, null, null, null)
  }
}

task runMarshmallowAdsTestsRelease(dependsOn: extractHtmlTemplates) {
  doLast {
    def releaseSystemProperties = systemPropertiesForBuildType('Android Listeners Release')

    testRunner().runTests(marshmallowLabel, onlyAdsTestsAnnotation, excludeAnnotations, releaseSystemProperties, null, null, null)
  }
}

task runMarshmallowTestsReleasePr(dependsOn: extractHtmlTemplates) {
  doLast {
    def releasePrSystemProperties = systemPropertiesForBuildType('Android Listeners Release PR')

    testRunner().runTests(marshmallowLabel, null, excludeAnnotationsRelease, releasePrSystemProperties, null, null, null)
  }
}

// Local build tasks

def localBuildSystemProperties = systemPropertiesForBuildType('Android Listeners Local Build')

task runListOfTests(dependsOn: extractHtmlTemplates) {
  doLast {
    def tests = [
            new Test('com.soundcloud.android.tests.stream.StreamTest', 'testStreamLoadsNextPage'),
    ] as Test[]

    testRunner().runTests(marshmallowLabel, null, null, localBuildSystemProperties, null, null, tests)
  }
}

task runTestClass(dependsOn: extractHtmlTemplates) {
  doLast {
    def classFilter = 'com.soundcloud.android.tests.stream.StreamTest'

    testRunner().runTests(marshmallowLabel, null, null, localBuildSystemProperties, classFilter, null, null)
  }
}

// Lollipop tasks

task runLollipopTests(dependsOn: extractHtmlTemplates) {
  doLast {
    def lollipopSystemProperties = systemPropertiesForBuildType('Android Listeners Lolliop Build')

    testRunner().runTests(lollipopLabel, null, excludeAnnotations, lollipopSystemProperties, null, null, null)
  }
}

task runLollipopTestsRelease(dependsOn: extractHtmlTemplates) {
  doLast {
    def lollipopSystemProperties = systemPropertiesForBuildType('Android Listeners Lolliop Release Build')

    testRunner().runTests(lollipopLabel, null, excludeAnnotationsRelease, lollipopSystemProperties, null, null, null)
  }
}
