<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html -->

<module name="Checker">
    <property name="charset" value="UTF-8" />

    <property name="severity" value="warning" />

    <module name="SuppressionFilter">
        <property name="file" value="${checkstyleSuppressionsPath}" />
    </module>
    <module name="SuppressionCommentFilter" />

    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf" />
    </module>

    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <module name="TreeWalker">

        <module name="SuppressWarningsHolder" />

        <module name="FileContentsHolder" />

        <!-- IMPORT CHECKS -->

        <module name="RedundantImport">
            <property name="severity" value="error" />
        </module>

        <!-- NAMING CHECKS -->

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$" />
        </module>

        <module name="TypeName">
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="true" />
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$" />
        </module>

        <module name="ConstantName">
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="false" />
            <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$" />
            <message key="name.invalidPattern" value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)." />
        </module>

        <module name="StaticVariableName">
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="true" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$" />
        </module>

        <module name="MemberNameCheck">
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="true" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
        </module>

        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$" />
        </module>

        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <property name="ignoreOverridden" value="true" />
        </module>

        <module name="LocalFinalVariableName" />

        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <property name="allowOneCharVarInForLoop" value="true" />
        </module>

        <module name="com.github.sevntu.checkstyle.checks.naming.EnumValueNameCheck">
            <property name="objFormat" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$" />
        </module>

        <!-- LENGTH and CODING CHECKS -->

        <module name="com.github.sevntu.checkstyle.checks.sizes.LineLengthExtended">
            <property name="max" value="200" />
            <property name="severity" value="error" />
            <property name="ignoreClass" value="true" />
            <property name="ignoreConstructor" value="true" />
            <property name="ignoreField" value="true" />
            <property name="ignoreMethod" value="true" />
            <property name="ignorePattern" value="^(package .*;\s*)|(import .*;\s*)|( *\* *https?://.*)$" />
        </module>

        <module name="com.github.sevntu.checkstyle.checks.coding.LogicConditionNeedOptimizationCheck" />

        <module name="com.github.sevntu.checkstyle.checks.design.AvoidConditionInversionCheck" />

        <module name="LeftCurly" />

        <module name="RightCurly">
            <property name="option" value="same" />
        </module>

        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO" />
        </module>

        <module name="UpperEll">
            <property name="severity" value="error" />
        </module>

        <module name="FallThrough">
            <property name="reliefPattern" value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on|no-op" />
            <property name="severity" value="error" />
        </module>

        <module name="MethodLength">
            <property name="max" value="100" />
            <property name="countEmpty" value="false" />
        </module>

        <module name="SimplifyBooleanReturn" />

        <module name="SimplifyBooleanExpression" />

        <module name="MissingOverride" />

        <module name="AvoidNestedBlocks" />

        <module name="MissingDeprecated" />

        <module name="EmptyBlock">
            <property name="option" value="TEXT" />
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
        </module>

        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true" />
            <property name="allowMultipleEmptyLines" value="false" />
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false" />
            <property name="tokens" value="IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, CTOR_DEF, VARIABLE_DEF" />
        </module>

        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected|ignore" />
        </module>

        <module name="FinalClass" />

        <module name="OneTopLevelClass" />

        <module name="EqualsAvoidNull" />

        <module name="EqualsHashCode" />

        <module name="com.github.sevntu.checkstyle.checks.coding.MultipleVariableDeclarationsExtended">
            <property name="ignoreCycles" value="true" />
            <property name="ignoreMethods" value="true" />
        </module>

        <module name="OneStatementPerLine" />

        <module name="StringLiteralEquality" />

        <module name="UnnecessaryParentheses" />

        <module name="CommentsIndentation" />

        <module name="OuterTypeFilename" />

        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true" />
            <property name="allowByTailComment" value="true" />
            <property name="allowNonPrintableEscapes" value="true" />
        </module>

        <module name="AvoidStarImport" />

        <module name="IllegalImport" />

        <module name="NoLineWrap" />

        <module name="ArrayTypeStyle" />

        <!-- MODIFIERS CHECKS -->

        <module name="ModifierOrder" />

        <!-- WHITESPACE CHECKS -->

        <module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR,
                            BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,
                            EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
                            LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
                            LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
                            MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,
                            SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN" />
            <property name="severity" value="error" />
        </module>

        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI, TYPECAST" />
        </module>

        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
            <property name="allowLineBreaks" value="true" />
            <property name="severity" value="error" />
        </module>

        <module name="NoWhitespaceBefore">
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC" />
            <property name="allowLineBreaks" value="true" />
            <property name="severity" value="error" />
        </module>

        <module name="ParenPad" />

    </module>
</module>
