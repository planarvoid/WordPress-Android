def buildSrcDir = 'buildsystem'
apply from: "${buildSrcDir}/setup.gradle"
apply from: "${buildSrcDir}/dependencies.gradle"

buildscript {
  repositories {
    mavenLocal()
    maven { url 'http://maven.int.s-cloud.net/content/groups/soundcloud-proxy' }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.3.0'
    classpath 'com.google.gms:google-services:3.0.0'
  }
}

allprojects {
  ext {
    manifestSrcFile = 'AndroidManifest.xml'
    javaSrcDirs = 'src/main/java'
    resSrcDirs = 'src/main/res'
    assetsSrcDirs = 'assets'

    androidCompileSdkVersion = 25
    androidMinSdkVersion = 14
    androidTargetSdkVersion = 25

    androidNetworkManagerApplicationId = 'com.soundcloud.androidnetworkmanager'

    mobileTestRunnerUser = "mobile"
    mobileTestRunnerHost = 'chaos-slave.mobile.s-cloud.net'
    mobileTestRunner = "com.soundcloud.mobiletestrunner:client:132-31-55df03b"
    mobileTestRunnerUrl = "http://$mobileTestRunnerHost:5000"
    mobileTestRunnerReportUrl = "http://mobile-jenkins.int.s-cloud.net:84"
    mobileTestRunnerMaxTestAttempts = 2
    mobileTestRunnerScheduleAllTestAttemptsAtOnce = false
    mobileTestRunnerMaxCollectionTaskAttempts = 3
  }
  repositories {
    mavenLocal()
    maven { url 'http://maven.int.s-cloud.net/content/groups/soundcloud-proxy' }
  }

  // Allow 1000 errors instead of default, as errors from failure to generate code can bury real errors
  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xmaxerrs" << "1000"
    }
  }

}

task deployDevDebug(type: Exec, dependsOn: 'app:installDevDebug') {
  def rootDir = project.rootDir
  def localProperties = new File(rootDir, "local.properties")
  if (localProperties.exists()) {
    Properties properties = new Properties()
    localProperties.withInputStream {
      inputStream -> properties.load(inputStream)
    }
    def sdkDir = properties.getProperty('sdk.dir')
    def adb = "$sdkDir/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.soundcloud.android.debug/com.soundcloud.android.main.LauncherActivity'
  }
}

def pullDb(def variant) {
  exec { commandLine 'adb', 'shell', "run-as com.soundcloud.android.$variant chmod 666 /data/data/com.soundcloud.android.$variant/databases/SoundCloud" }
  exec { commandLine 'adb', 'shell', "run-as com.soundcloud.android.$variant cat /data/data/com.soundcloud.android.$variant/databases/SoundCloud > /sdcard/sc-${variant}.db" }
  exec { commandLine 'adb', 'pull', "/sdcard/sc-${variant}.db" }
  exec { commandLine 'adb', 'shell', "rm -f /sdcard/sc-${variant}.db" }
}

task pullDebugDb() {
  doLast {
    pullDb("debug")
  }
}

task pullAlphaDb() {
  doLast {
    pullDb("alpha")
  }
}
